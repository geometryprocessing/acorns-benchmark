#include <math.h>
#include <vector>
#include <cassert>
#include <iostream>
#include "autodiff.h"
#include <Eigen/Cholesky>
#include <chrono>
#include <fstream>
#include <string>

using namespace std;
using namespace std::chrono;
DECLARE_DIFFSCALAR_BASE();

typedef Eigen::Matrix<double, Eigen::Dynamic, 1> Gradient;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Hessian;
typedef DScalar2<double, Gradient, Hessian> DScalar;

template <typename T>
T determinant(const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic, 0, 3, 3> &mat);
DScalar func(const double *local_disp, const int local_disp_size, const double *grads, const int grads_size,
            const double *vjac_it, const int vjac_it_size, const double *da, const int da_size,
            const double mu, const double lambda, const int size);


int main(int argc, char const *argv[])
{
    ostringstream ss;
    ss.precision(3);

    std::vector<double> local_disp = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::vector<double> grads = {0.301224, 0.301224, 0.301224, -0.838038, 0, 0, 0, -0.945757, 0, 0, 0, 2.08502, 0.536814, -0.161962, -0.161962, 0.0542428, 0.161962, 0, -0.0542428, 0.644533, -0.0542428, -3.08502, -3.08502, -2.38624, 3.08502, 0, 0.161962, 0, 3.08502, 0.0542428, 0.67438, 0.67438, 0.67438, 2.01003, 0, 0, 0, -0.727603, 0, 0, 0, -0.608051, -2.68441, -3.01003, -3.01003, 0.272397, 3.01003, 0, -0.272397, 0.0532222, -0.272397, -0.391949, -0.391949, -0.0663291, 0.391949, 0, 3.01003, 0, 0.391949, 0.272397, -1.96492, -1.96492, -1.96492, -0.731107, 0, 0, 0, -0.859264, 0, 0, 0, -0.374544, 2.69602, -0.268893, -0.268893, 0.140736, 0.268893, 0, -0.140736, 2.82418, -0.140736, -0.625456, -0.625456, 2.33946, 0.625456, 0, 0.268893, 0, 0.625456, 0.140736, 0.786635, 0.786635, 0.786635, 0.677065, 0, 0, 0, -0.808874, 0, 0, 0, 0.918444, -1.4637, -1.67707, -1.67707, 0.191126, 1.67707, 0, -0.191126, 0.0222392, -0.191126, -1.91844, -1.91844, -1.70508, 1.91844, 0, 1.67707, 0, 1.91844, 0.191126, -0.731814, -0.731814, -0.731814, 0.803064, 0, 0, 0, -0.762174, 0, 0, 0, -0.772704, -0.0712495, -1.80306, -1.80306, 0.237826, 1.80306, 0, -0.237826, 1.49399, -0.237826, -0.227296, -0.227296, 1.50452, 0.227296, 0, 1.80306, 0, 0.227296, 0.237826, -1.15203, -1.15203, -1.15203, -0.482355, 0, 0, 0, 0.320762, 0, 0, 0, -0.990436, 1.63438, -0.517645, -0.517645, 1.32076, 0.517645, 0, -1.32076, 0.831267, -1.32076, -0.00956403, -0.00956403, 2.14246, 0.00956403, 0, 0.517645, 0, 0.00956403, 1.32076, 0.964035, 0.964035, 0.964035, -0.513832, 0, 0, 0, 0.225976, 0, 0, 0, 1.25189, -0.450203, -0.486168, -0.486168, 1.22598, 0.486168, 0, -1.22598, -1.19001, -1.22598, -2.25189, -2.25189, -2.21593, 2.25189, 0, 0.486168, 0, 2.25189, 1.22598, 0.573583, 0.573583, 0.573583, -0.611181, 0, 0, 0, 1.73756, 0, 0, 0, -0.552797, 0.0375981, -0.388819, -0.388819, 2.73756, 0.388819, 0, -2.73756, -2.31114, -2.73756, -0.447203, -0.447203, -0.0207864, 0.447203, 0, 0.388819, 0, 0.447203, 2.73756, -0.316932, -0.316932, -0.316932, -0.881722, 0, 0, 0, 0.271614, 0, 0, 0, 0.293176, 1.19865, -0.118278, -0.118278, 1.27161, 0.118278, 0, -1.27161, 0.0453176, -1.27161, -1.29318, -1.29318, 0.0237559, 1.29318, 0, 0.118278, 0, 1.29318, 1.27161, 0.584624, 0.584624, 0.584624, 0.730841, 0, 0, 0, 0.415293, 0, 0, 0, -0.56151, -1.31546, -1.73084, -1.73084, 1.41529, 1.73084, 0, -1.41529, -0.999916, -1.41529, -0.43849, -0.43849, -0.0231132, 0.43849, 0, 1.73084, 0, 0.43849, 1.41529, -0.217794, -0.217794, -0.217794, -0.0388933, 0, 0, 0, -0.492793, 0, 0, 0, 0.313893, 0.256687, -0.961107, -0.961107, 0.507207, 0.961107, 0, -0.507207, 0.710587, -0.507207, -1.31389, -1.31389, -0.0960992, 1.31389, 0, 0.961107, 0, 1.31389, 0.507207};
    std::vector<double> vjac_it = {-5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101, -5.02314, 28.9416, -1.25258, 23.0484, -23.8101, -6.92975, -0.329875, -2.10039, -22.1101};
    std::vector<double> da = {5.31249e-07, 7.48105e-07, 7.49735e-07, 8.11174e-07, 9.40251e-07, 1.03083e-06, 1.07501e-06, 1.44101e-06, 1.49198e-06, 2.09755e-06, 2.61775e-06};
    double lambda = 0.32967032967033;
    double mu = 0.384615384615385;
    int size = 3;
    string output_filename = "./results/wenzel/hess/3D_P2_zero_hess.txt";

    Eigen::VectorXd ders(local_disp.size(), local_disp.size());

    auto start = high_resolution_clock::now();

    DScalar en = func(
        &local_disp[0], local_disp.size(),
        &grads[0], grads.size(),
        &vjac_it[0], vjac_it.size(),
        &da[0], da.size(),
        lambda, mu, size);

    Gradient grad = en.getGradient();
    Hessian hess = en.getHessian();
    Gradient &grad_ref = grad;
    Hessian &hess_ref = hess;

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    std::cout << "#Hessians=" << hess.size() << endl;
    std::cout << "Time took: " << (double)duration.count() / 1000000.0 << endl;
    ofstream outfile;
    outfile.open(output_filename);
    outfile << (double)duration.count() / 1000000.0 << " ";



    double expected_value = 0;
//     assert(fabs(expected_value - en.getValue()) < 1e-8);

    std::vector<double> expected_grads = {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0};
    for (int i = 0; i < grad_ref.size(); i++)
    {
        double current_grad = grad_ref(i);
        double expected_grad = expected_grads[i];
        // std::cout << "current_grad: " << current_grad << ", expected_grad: " << expected_grad << endl;
//         assert(fabs(expected_grad - current_grad) < 1e-1);
    }
    std::vector<double> expected_hessians = {   0.06618,    0.01345,  -0.003807,   0.008908,  -0.006619, -0.0006434,   0.008354,  0.0009072,   0.001764,   0.004799,     0.0102,  -0.002389,   -0.04878,    0.01537,   0.003199,    0.01726,  -0.005711,    0.00112,   -0.04712,  -0.007206,  -0.004022,   -0.03646,   -0.03507,   0.008437,    0.01371,   0.003577,  -0.003033,    0.01315,     0.0111, -0.0006257,     0.01345,     0.1739,   -0.03097,  -0.005533,    0.01849,   -0.02272,   0.001199,    0.03243,   0.009651,   0.008819,   0.007071,   0.002751,    0.01212,    -0.1134,     0.0785,  -0.004335,    0.05091,   -0.01307,   -0.00808,    -0.1553,   -0.01863,   -0.03094,    -0.0792,   0.002069,   0.003285,    0.02556,   -0.01997,    0.01002,     0.0395,     0.0124,   -0.003807,   -0.03097,    0.07329,   -0.00137,   -0.02614,    0.02371,   0.002018,    0.01239,  0.0002991,  -0.001917,   0.003424,  0.0004185,   0.005379,    0.08873,   -0.09557,  0.0006479,   -0.01375,    0.02401,  -0.004785,   -0.02685,   -0.02533,    0.00702,  5.095e-05,   -0.02569,  -0.003287,   -0.02271,    0.02413,   0.000101,    0.01581,  0.0007176,    0.008908,  -0.005533,   -0.00137,     0.1208,  -0.008601,    0.05034,    0.01655,   0.004081,   0.004211,    0.01482,  -0.001415,    0.01394,     -0.067,    0.01947,   -0.01267,   -0.08993,  -0.009377,   -0.02941,    0.02546,  -0.001452,   0.002841,    0.02373,  -0.006948,    0.01257,   -0.08474,   0.007113,    -0.0586,    0.03137,   0.002666,    0.01815,   -0.006619,    0.01849,   -0.02614,  -0.008601,     0.1119,   -0.03053,   0.004731,    0.01162,    0.01359, -0.0009795,   0.007186,   0.002373,    0.02272,   -0.09275,    0.08859,   -0.01133,   -0.07215,   -0.03059,  -0.001888,     0.0301,   -0.01255,  -0.007598,    0.02567,   -0.02376,   0.005805,   -0.05885,   0.003057,   0.003752,    0.01881,    0.01596,  -0.0006434,   -0.02272,    0.02371,    0.05034,   -0.03053,     0.2853,   0.005092,    0.01075,    0.05369,    0.01233,   0.001801,    0.01771,   -0.01485,    0.07835,    -0.1663,   -0.03206,   -0.02207,    -0.2562,   0.004448,   -0.01198,     0.0774,    0.01169,   -0.02092,    0.04142,   -0.05377,   0.004773,    -0.1482,    0.01742,    0.01255,     0.0714,    0.008354,   0.001199,   0.002018,    0.01655,   0.004731,   0.005092,    0.06233,  -0.001658,  -0.001994,  -0.004127,  -0.006482,  -0.007774,     0.0249,    0.00593,    0.00711,   -0.07043,   -0.01364,   -0.01461,   -0.04584,  -0.003043,  -0.005389,   0.004227,  -0.005284,  -0.005756,    0.01242,  -0.001751,  -0.002682,  -0.008395,       0.02,    0.02399,   0.0009072,    0.03243,    0.01239,   0.004081,    0.01162,    0.01075,  -0.001658,     0.1095,    0.05683,  -0.005541,  -0.007537,  -0.004195,   0.004989,    0.04404,    0.02314,   -0.01169,   -0.07137,   -0.05118,  -0.002169,    -0.1338,   -0.05611,  -0.004634,    0.02489,   0.008194,   -0.00146,   0.004083,   0.006552,    0.01718,    -0.0139,  -0.006356,    0.001764,   0.009651,  0.0002991,   0.004211,    0.01359,    0.05369,  -0.001994,    0.05683,     0.1306,  -0.006639,  -0.004296,   -0.01045,   0.005975,    0.02324,    0.05399,   -0.01197,    -0.0597,    -0.2046,  -0.004627,   -0.04789,   -0.04443,  -0.004875,   0.005354,   -0.01015,  -0.002428,   0.009291,    0.04324,    0.02058,  -0.006053,   -0.01219,    0.004799,   0.008819,  -0.001917,    0.01482, -0.0009795,    0.01233,  -0.004127,  -0.005541,  -0.006639,    0.04648,   0.006894,    0.01133,    0.01962,   0.007839,    0.01041,    0.01069,  -0.006521,   0.005692,  0.0006719,   0.003277,  -0.008556,   -0.02989,   -0.02875,   0.001976,   -0.05996,  0.0006405,   -0.04077,  -0.003112,    0.01433,    0.01614,      0.0102,   0.007071,   0.003424,  -0.001415,   0.007186,   0.001801,  -0.006482,  -0.007537,  -0.004296,   0.006894,    0.02016,   0.002787,    0.00878,    0.01426,   0.005225,  -0.007897, -0.0003511,  -0.002495,   0.003713, -0.0004656, -0.0008723,   -0.03288,   -0.02793,    -0.0112,   0.001948,   -0.02828,  -0.006333,    0.01715,    0.01589,    0.01196,   -0.002389,   0.002751,  0.0004185,    0.01394,   0.002373,    0.01771,  -0.007774,  -0.004195,   -0.01045,    0.01133,   0.002787,    0.02304,    0.01155,   0.005124,    0.01813,   0.006164,  -0.001822,   0.007262,   -0.01016,  -0.001444,   -0.01003,   0.003393,  -0.009183,  -0.008936,   -0.04559,  -0.008048,   -0.06081,    0.01955,    0.01166,    0.02366,    -0.04878,    0.01212,   0.005379,     -0.067,    0.02272,   -0.01485,     0.0249,   0.004989,   0.005975,    0.01962,    0.00878,    0.01155,     0.4275,    0.06154,     0.1321,  -0.007544,  -0.008577,    0.03874,    -0.1132,   0.003789,   -0.04034,   -0.08516,    0.01061,    -0.1015,    0.02781,    -0.0609,    0.03305,    -0.1781,   -0.05508,    -0.0701,     0.01537,    -0.1134,    0.08873,    0.01947,   -0.09275,    0.07835,    0.00593,    0.04404,    0.02324,   0.007839,    0.01426,   0.005124,    0.06154,     0.6143,    0.03145,   -0.01785,    -0.2307,   -0.08136,   0.001768,   -0.06467,   -0.08405,    0.01697,    0.07221,    0.03327,   -0.05597,   -0.01009,    0.01869,   -0.05508,    -0.2332,    -0.1134,    0.003199,     0.0785,   -0.09557,   -0.01267,    0.08859,    -0.1663,    0.00711,    0.02314,    0.05399,    0.01041,   0.005225,    0.01813,     0.1321,    0.03145,     0.7666,    0.03609,   -0.07827,    0.06845,   -0.05131,   -0.08593,    -0.4278,   -0.09348,     0.0215,    -0.1405,    0.03861,    0.02924,     0.2114,    -0.0701,    -0.1134,    -0.2885,     0.01726,  -0.004335,  0.0006479,   -0.08993,   -0.01133,   -0.03206,   -0.07043,   -0.01169,   -0.01197,    0.01069,  -0.007897,   0.006164,  -0.007544,   -0.01785,    0.03609,      0.356,   -0.06261,    0.09171,   -0.08777,    0.02094,   -0.01661,    -0.1118,    0.04893,   -0.02725,    0.06865,    0.02713,    0.05319,   -0.08516,    0.01871,   -0.09992,   -0.005711,    0.05091,   -0.01375,  -0.009377,   -0.07215,   -0.02207,   -0.01364,   -0.07137,    -0.0597,  -0.006521, -0.0003511,  -0.001822,  -0.008577,    -0.2307,   -0.07827,   -0.06261,     0.4974,   -0.02722,    0.02819,     -0.178,      0.181,    0.04893,    -0.2022,    0.06228,    0.02045,     0.1342,   -0.05962,   0.008866,    0.07221,    0.01921,     0.00112,   -0.01307,    0.02401,   -0.02941,   -0.03059,    -0.2562,   -0.01461,   -0.05118,    -0.2046,   0.005692,  -0.002495,   0.007262,    0.03874,   -0.08136,    0.06845,    0.09171,   -0.02722,     0.6797,   -0.02493,      0.176,    -0.2315,   -0.02725,    0.06228,    -0.1251,    0.05406,   -0.06789,     0.1784,   -0.09512,    0.03555,    -0.1405,    -0.04712,   -0.00808,  -0.004785,    0.02546,  -0.001888,   0.004448,   -0.04584,  -0.002169,  -0.004627,  0.0006719,   0.003713,   -0.01016,    -0.1132,   0.001768,   -0.05131,   -0.08777,    0.02819,   -0.02493,     0.2759,    0.02303,    -0.0306,    0.06865,    0.02422,     0.0586,    -0.1045,  -0.007303,    0.02286,    0.02781,   -0.06147,     0.0405,   -0.007206,    -0.1553,   -0.02685,  -0.001452,     0.0301,   -0.01198,  -0.003043,    -0.1338,   -0.04789,   0.003277, -0.0004656,  -0.001444,   0.003789,   -0.06467,   -0.08593,    0.02094,     -0.178,      0.176,    0.02303,     0.4965,   -0.01921,    0.02336,     0.1342,   -0.06829,  -0.007303,    -0.1186,    0.05369,   -0.05539,   -0.01009,    0.03194,   -0.004022,   -0.01863,   -0.02533,   0.002841,   -0.01255,     0.0774,  -0.005389,   -0.05611,   -0.04443,  -0.008556, -0.0008723,   -0.01003,   -0.04034,   -0.08405,    -0.4278,   -0.01661,      0.181,    -0.2315,    -0.0306,   -0.01921,     0.5413,    0.04865,   -0.05922,     0.1784,    0.02286,    0.05369,    -0.2695,    0.03116,      0.016,     0.2114,    -0.03646,   -0.03094,    0.00702,    0.02373,  -0.007598,    0.01169,   0.004227,  -0.004634,  -0.004875,   -0.02989,   -0.03288,   0.003393,   -0.08516,    0.01697,   -0.09348,    -0.1118,    0.04893,   -0.02725,    0.06865,    0.02336,    0.04865,      0.262,    -0.0218,    0.03727,   -0.08777,    0.02528,   -0.01952,  -0.007544,   -0.01668,    0.03711,    -0.03507,    -0.0792,  5.095e-05,  -0.006948,    0.02567,   -0.02092,  -0.005284,    0.02489,   0.005354,   -0.02875,   -0.02793,  -0.009183,    0.01061,    0.07221,     0.0215,    0.04893,    -0.2022,    0.06228,    0.02422,     0.1342,   -0.05922,    -0.0218,      0.461,   -0.09985,    0.02384,     -0.178,     0.1673,  -0.009743,    -0.2307,   -0.06731,    0.008437,   0.002069,   -0.02569,    0.01257,   -0.02376,    0.04142,  -0.005756,   0.008194,   -0.01015,   0.001976,    -0.0112,  -0.008936,    -0.1015,    0.03327,    -0.1405,   -0.02725,    0.06228,    -0.1251,     0.0586,   -0.06829,     0.1784,    0.03727,   -0.09985,     0.2535,   -0.02203,     0.1896,    -0.2315,    0.03772,   -0.09232,    0.06845,     0.01371,   0.003285,  -0.003287,   -0.08474,   0.005805,   -0.05377,    0.01242,   -0.00146,  -0.002428,   -0.05996,   0.001948,   -0.04559,    0.02781,   -0.05597,    0.03861,    0.06865,    0.02045,    0.05406,    -0.1045,  -0.007303,    0.02286,   -0.08777,    0.02384,   -0.02203,     0.3276,   0.005026,    0.05936,    -0.1132,   0.004366,   -0.04779,    0.003577,    0.02556,   -0.02271,   0.007113,   -0.05885,   0.004773,  -0.001751,   0.004083,   0.009291,  0.0006405,   -0.02828,  -0.008048,    -0.0609,   -0.01009,    0.02924,    0.02713,     0.1342,   -0.06789,  -0.007303,    -0.1186,    0.05369,    0.02528,     -0.178,     0.1896,   0.005026,     0.2946,   -0.09068,    0.00119,   -0.06467,   -0.09729,   -0.003033,   -0.01997,    0.02413,    -0.0586,   0.003057,    -0.1482,  -0.002682,   0.006552,    0.04324,   -0.04077,  -0.006333,   -0.06081,    0.03305,    0.01869,     0.2114,    0.05319,   -0.05962,     0.1784,    0.02286,    0.05369,    -0.2695,   -0.01952,     0.1673,    -0.2315,    0.05936,   -0.09068,     0.6806,   -0.04386,   -0.07269,    -0.4278,     0.01315,    0.01002,   0.000101,    0.03137,   0.003752,    0.01742,  -0.008395,    0.01718,    0.02058,  -0.003112,    0.01715,    0.01955,    -0.1781,   -0.05508,    -0.0701,   -0.08516,   0.008866,   -0.09512,    0.02781,   -0.05539,    0.03116,  -0.007544,  -0.009743,    0.03772,    -0.1132,    0.00119,   -0.04386,     0.3232,    0.06206,    0.08254,      0.0111,     0.0395,    0.01581,   0.002666,    0.01881,    0.01255,       0.02,    -0.0139,  -0.006053,    0.01433,    0.01589,    0.01166,   -0.05508,    -0.2332,    -0.1134,    0.01871,    0.07221,    0.03555,   -0.06147,   -0.01009,      0.016,   -0.01668,    -0.2307,   -0.09232,   0.004366,   -0.06467,   -0.07269,    0.06206,     0.4061,     0.1929,  -0.0006257,     0.0124,  0.0007176,    0.01815,    0.01596,     0.0714,    0.02399,  -0.006356,   -0.01219,    0.01614,    0.01196,    0.02366,    -0.0701,    -0.1134,    -0.2885,   -0.09992,    0.01921,    -0.1405,     0.0405,    0.03194,     0.2114,    0.03711,   -0.06731,    0.06845,   -0.04779,   -0.09729,    -0.4278,    0.08254,     0.1929,     0.4933};
    for (int i = 0; i < hess_ref.size(); i++)
    {
        double current_hess = hess_ref(i);
        double expected_hess = expected_hessians[i];
        std::cout << "current_hess: " << current_hess <<endl; //<< ", expected_hess: " << expected_hess << endl;
//         assert(fabs(expected_hess - current_hess) < 1e-1);
    }

    /*
    for (int i = 0; i < local_disp.size() * local_disp.size(); i++)
    {
        ostringstream ss;
        ss.precision(3);
        ss << fixed << ders[i];
        outfile << ss.str() << " ";
    }
    */

    outfile.close();
    return 0;
}

/*
local_disp: n_local_disp x size (3)
grads: n_pts x n_grads x size (3)
vjac_it: n_pts x size x size (3)
da: n_pts x 1
*/
DScalar func(const double *local_disp, const int local_disp_size, const double *grads,
            const int grads_size, const double *vjac_it, const int vjac_it_size,
            const double *da, const int da_size, const double lambda, const double mu, const int size)
{

    std::cout << "local_disp_size: " << local_disp_size << endl;
    typedef Eigen::Matrix<DScalar, Eigen::Dynamic, 1> AutoDiffVect;
    typedef Eigen::Matrix<DScalar, Eigen::Dynamic, Eigen::Dynamic, 0, 3, 3> AutoDiffGradMat;

    DiffScalarBase::setVariableCount(local_disp_size);
    int n_local_disp = local_disp_size / size; 
    int n_grads = grads_size / da_size / size; 
    assert(n_grads == n_local_disp);
    int n_pts = da_size;

    DScalar energy = DScalar(0.0);

    AutoDiffVect local_disp_ad(local_disp_size);

    for (long i = 0; i < local_disp_size; ++i)
    {
        local_disp_ad(i) = DScalar(i, local_disp[i]);
    }

    AutoDiffGradMat def_grad(size, size);

    for (long p = 0; p < n_pts; ++p)
    {

        for (long k = 0; k < def_grad.size(); ++k)
        {
            def_grad(k) = DScalar(0.0);
        }

        for (int i = 0; i < n_grads; ++i)
        {
            for (int d = 0; d < size; ++d)
            {
                for (int c = 0; c < size; ++c)
                {
                    assert(i * size + d < local_disp_size);
                    assert((i + p * n_grads) * size + c < grads_size);
                    def_grad(d, c) += DScalar(grads[(i + p * n_grads) * size + c]) * local_disp_ad(i * size + d);
                }
            }
        }

        AutoDiffGradMat jac_it(size, size);
        for (long k = 0; k < jac_it.size(); ++k)
            jac_it(k) = DScalar(vjac_it[p*size*size + k]);

        def_grad = def_grad * jac_it;

        //Id + grad d
        for (int d = 0; d < size; ++d)
            def_grad(d, d) += DScalar(1.0);

        DScalar log_det_j = log(determinant(def_grad));
        DScalar val = mu / 2. * ((def_grad.transpose() * def_grad).trace() - size - 2 * log_det_j) + lambda / 2. * log_det_j * log_det_j;
        energy += val * DScalar(da[p]);
    }

    return energy;
}

template <typename T>
T determinant(const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic, 0, 3, 3> &mat)
{
    assert(mat.rows() == mat.cols());

    if (mat.rows() == 1)
        return mat(0);
    else if (mat.rows() == 2)
        return mat(0, 0) * mat(1, 1) - mat(0, 1) * mat(1, 0);
    else if (mat.rows() == 3)
        return mat(0, 0) * (mat(1, 1) * mat(2, 2) - mat(1, 2) * mat(2, 1)) - mat(0, 1) * (mat(1, 0) * mat(2, 2) - mat(1, 2) * mat(2, 0)) + mat(0, 2) * (mat(1, 0) * mat(2, 1) - mat(1, 1) * mat(2, 0));

    assert(false);
    return T(0);
}
