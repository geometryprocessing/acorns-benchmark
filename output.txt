FileAST: 
  FuncDef: 
    Decl: func, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: local_disp, ['const'], [], []
            PtrDecl: []
              TypeDecl: local_disp, ['const']
                IdentifierType: ['double']
          Decl: n_local_disp, ['const'], [], []
            TypeDecl: n_local_disp, ['const']
              IdentifierType: ['int']
          Decl: grads, ['const'], [], []
            PtrDecl: []
              TypeDecl: grads, ['const']
                IdentifierType: ['double']
          Decl: n_grads, ['const'], [], []
            TypeDecl: n_grads, ['const']
              IdentifierType: ['int']
          Decl: vjac_it, ['const'], [], []
            PtrDecl: []
              TypeDecl: vjac_it, ['const']
                IdentifierType: ['double']
          Decl: da, ['const'], [], []
            PtrDecl: []
              TypeDecl: da, ['const']
                IdentifierType: ['double']
          Decl: n_pts, ['const'], [], []
            TypeDecl: n_pts, ['const']
              IdentifierType: ['int']
          Decl: mu, ['const'], [], []
            TypeDecl: mu, ['const']
              IdentifierType: ['double']
          Decl: lambda, ['const'], [], []
            TypeDecl: lambda, ['const']
              IdentifierType: ['double']
        TypeDecl: func, []
          IdentifierType: ['double']
    Compound: 
      Decl: size, ['const'], [], []
        TypeDecl: size, ['const']
          IdentifierType: ['int']
        Constant: int, 3
      Decl: n_grads, [], [], []
        TypeDecl: n_grads, []
          IdentifierType: ['int']
        Constant: int, 10
      Decl: mu, [], [], []
        TypeDecl: mu, []
          IdentifierType: ['double']
        Constant: double, 0.384615
      Decl: lambda, [], [], []
        TypeDecl: lambda, []
          IdentifierType: ['double']
        Constant: double, 0.32967
      For: 
        DeclList: 
          Decl: k1, [], [], []
            TypeDecl: k1, []
              IdentifierType: ['long']
            Constant: int, 0
        BinaryOp: <
          ID: k1
          ID: size
        UnaryOp: ++
          ID: k1
        Compound: 
          For: 
            DeclList: 
              Decl: k2, [], [], []
                TypeDecl: k2, []
                  IdentifierType: ['long']
                Constant: int, 0
            BinaryOp: <
              ID: k2
              ID: size
            UnaryOp: ++
              ID: k2
            Assignment: =
              ArrayRef: 
                ArrayRef: 
                  ID: def_grad
                  ID: k1
                ID: k2
              Constant: double, 0.
      For: 
        DeclList: 
          Decl: i, [], [], []
            TypeDecl: i, []
              IdentifierType: ['int']
            Constant: int, 0
        BinaryOp: <
          ID: i
          ID: n_grads
        UnaryOp: ++
          ID: i
        Compound: 
          For: 
            DeclList: 
              Decl: d, [], [], []
                TypeDecl: d, []
                  IdentifierType: ['int']
                Constant: int, 0
            BinaryOp: <
              ID: d
              ID: size
            UnaryOp: ++
              ID: d
            Compound: 
              For: 
                DeclList: 
                  Decl: c, [], [], []
                    TypeDecl: c, []
                      IdentifierType: ['int']
                    Constant: int, 0
                BinaryOp: <
                  ID: c
                  ID: size
                UnaryOp: ++
                  ID: c
                Compound: 
                  Assignment: =
                    ArrayRef: 
                      ArrayRef: 
                        ID: def_grad
                        ID: d
                      ID: c
                    BinaryOp: +
                      ArrayRef: 
                        ArrayRef: 
                          ID: def_grad
                          ID: d
                        ID: c
                      BinaryOp: *
                        ArrayRef: 
                          ID: grads
                          BinaryOp: +
                            BinaryOp: *
                              BinaryOp: +
                                ID: i
                                BinaryOp: *
                                  ID: p
                                  ID: n_grads
                              ID: size
                            ID: c
                        ArrayRef: 
                          ID: local_disp
                          BinaryOp: +
                            BinaryOp: *
                              ID: i
                              ID: size
                            ID: d
      For: 
        DeclList: 
          Decl: k1, [], [], []
            TypeDecl: k1, []
              IdentifierType: ['long']
            Constant: int, 0
        BinaryOp: <
          ID: k1
          ID: size
        UnaryOp: ++
          ID: k1
        Compound: 
          For: 
            DeclList: 
              Decl: k2, [], [], []
                TypeDecl: k2, []
                  IdentifierType: ['long']
                Constant: int, 0
            BinaryOp: <
              ID: k2
              ID: size
            UnaryOp: ++
              ID: k2
            Compound: 
              Assignment: =
                ArrayRef: 
                  ArrayRef: 
                    ID: jac_it
                    ID: k1
                  ID: k2
                ArrayRef: 
                  ID: vjac_it
                  BinaryOp: +
                    BinaryOp: +
                      BinaryOp: *
                        BinaryOp: *
                          ID: p
                          ID: size
                        ID: size
                      BinaryOp: *
                        ID: k2
                        ID: size
                    ID: k1
      For: 
        DeclList: 
          Decl: c, [], [], []
            TypeDecl: c, []
              IdentifierType: ['int']
            Constant: int, 0
        BinaryOp: <
          ID: c
          ID: size
        UnaryOp: p++
          ID: c
        Compound: 
          For: 
            DeclList: 
              Decl: d, [], [], []
                TypeDecl: d, []
                  IdentifierType: ['int']
                Constant: int, 0
            BinaryOp: <
              ID: d
              ID: size
            UnaryOp: p++
              ID: d
            Compound: 
              Assignment: =
                ArrayRef: 
                  ArrayRef: 
                    ID: mult
                    ID: c
                  ID: d
                BinaryOp: +
                  BinaryOp: +
                    BinaryOp: *
                      ArrayRef: 
                        ArrayRef: 
                          ID: def_grad
                          ID: c
                        Constant: int, 0
                      ArrayRef: 
                        ArrayRef: 
                          ID: jac_it
                          Constant: int, 0
                        ID: d
                    BinaryOp: *
                      ArrayRef: 
                        ArrayRef: 
                          ID: def_grad
                          ID: c
                        Constant: int, 1
                      ArrayRef: 
                        ArrayRef: 
                          ID: jac_it
                          Constant: int, 1
                        ID: d
                  BinaryOp: *
                    ArrayRef: 
                      ArrayRef: 
                        ID: def_grad
                        ID: c
                      Constant: int, 2
                    ArrayRef: 
                      ArrayRef: 
                        ID: jac_it
                        Constant: int, 2
                      ID: d
      For: 
        DeclList: 
          Decl: d, [], [], []
            TypeDecl: d, []
              IdentifierType: ['int']
            Constant: int, 0
        BinaryOp: <
          ID: d
          ID: size
        UnaryOp: ++
          ID: d
        Assignment: =
          ArrayRef: 
            ArrayRef: 
              ID: mult
              ID: d
            ID: d
          BinaryOp: +
            ArrayRef: 
              ArrayRef: 
                ID: mult
                ID: d
              ID: d
            Constant: int, 1
      Decl: det_def_grad, ['const'], [], []
        TypeDecl: det_def_grad, ['const']
          IdentifierType: ['double']
        BinaryOp: -
          BinaryOp: *
            ArrayRef: 
              ArrayRef: 
                ID: mult
                Constant: int, 0
              Constant: int, 0
            ArrayRef: 
              ArrayRef: 
                ID: mult
                Constant: int, 1
              Constant: int, 1
          BinaryOp: *
            ArrayRef: 
              ArrayRef: 
                ID: mult
                Constant: int, 0
              Constant: int, 1
            ArrayRef: 
              ArrayRef: 
                ID: mult
                Constant: int, 1
              Constant: int, 0
      For: 
        DeclList: 
          Decl: c, [], [], []
            TypeDecl: c, []
              IdentifierType: ['int']
            Constant: int, 0
        BinaryOp: <
          ID: c
          ID: size
        UnaryOp: p++
          ID: c
        Compound: 
          For: 
            DeclList: 
              Decl: d, [], [], []
                TypeDecl: d, []
                  IdentifierType: ['int']
                Constant: int, 0
            BinaryOp: <
              ID: d
              ID: size
            UnaryOp: p++
              ID: d
            Compound: 
              Assignment: =
                ArrayRef: 
                  ArrayRef: 
                    ID: mult1
                    ID: c
                  ID: d
                BinaryOp: +
                  BinaryOp: +
                    BinaryOp: *
                      ArrayRef: 
                        ArrayRef: 
                          ID: mult
                          ID: c
                        Constant: int, 0
                      ArrayRef: 
                        ArrayRef: 
                          ID: mult
                          ID: d
                        Constant: int, 0
                    BinaryOp: *
                      ArrayRef: 
                        ArrayRef: 
                          ID: mult
                          ID: c
                        Constant: int, 1
                      ArrayRef: 
                        ArrayRef: 
                          ID: mult
                          ID: d
                        Constant: int, 1
                  BinaryOp: *
                    ArrayRef: 
                      ArrayRef: 
                        ID: mult
                        ID: c
                      Constant: int, 2
                    ArrayRef: 
                      ArrayRef: 
                        ID: mult
                        ID: d
                      Constant: int, 2
      Assignment: =
        ID: trace
        BinaryOp: +
          BinaryOp: +
            ArrayRef: 
              ArrayRef: 
                ID: mult1
                Constant: int, 0
              Constant: int, 0
            ArrayRef: 
              ArrayRef: 
                ID: mult1
                Constant: int, 1
              Constant: int, 1
          ArrayRef: 
            ArrayRef: 
              ID: mult1
              Constant: int, 2
            Constant: int, 2
      Decl: log_det_j, ['const'], [], []
        TypeDecl: log_det_j, ['const']
          IdentifierType: ['double']
        FuncCall: 
          ID: log
          ExprList: 
            ID: det_def_grad
      Decl: val, ['const'], [], []
        TypeDecl: val, ['const']
          IdentifierType: ['double']
        BinaryOp: +
          BinaryOp: *
            BinaryOp: /
              ID: mu
              Constant: double, 2.
            BinaryOp: -
              BinaryOp: -
                ID: trace
                ID: size
              BinaryOp: *
                Constant: int, 2
                ID: log_det_j
          BinaryOp: *
            BinaryOp: *
              BinaryOp: /
                ID: lambda
                Constant: int, 2
              ID: log_det_j
            ID: log_det_j
      Assignment: =
        ID: energy
        BinaryOp: +
          ID: energy
          BinaryOp: *
            ID: val
            ArrayRef: 
              ID: da
              ID: p
In match item
Decl(name='size',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='size',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='3'
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='size',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='size',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='3'
                   ),
     bitsize=None
     )
Constant
New variable:  size  =  3
In match item
Decl(name='n_grads',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='n_grads',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='10'
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='n_grads',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='n_grads',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='10'
                   ),
     bitsize=None
     )
Constant
New variable:  n_grads  =  10
In match item
Decl(name='mu',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='mu',
                   quals=[
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=Constant(type='double',
                   value='0.384615'
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='mu',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='mu',
                   quals=[
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=Constant(type='double',
                   value='0.384615'
                   ),
     bitsize=None
     )
Constant
New variable:  mu  =  0.384615
In match item
Decl(name='lambda',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='lambda',
                   quals=[
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=Constant(type='double',
                   value='0.32967'
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='lambda',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='lambda',
                   quals=[
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=Constant(type='double',
                   value='0.32967'
                   ),
     bitsize=None
     )
Constant
New variable:  lambda  =  0.32967
In match item
For(init=DeclList(decls=[Decl(name='k1',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='k1',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['long'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='k1'
                          ),
                  right=ID(name='size'
                           )
                  ),
    next=UnaryOp(op='++',
                 expr=ID(name='k1'
                         )
                 ),
    stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='k2',
                                                             quals=[
                                                                   ],
                                                             storage=[
                                                                     ],
                                                             funcspec=[
                                                                      ],
                                                             type=TypeDecl(declname='k2',
                                                                           quals=[
                                                                                 ],
                                                                           type=IdentifierType(names=['long'
                                                                                                     ]
                                                                                               )
                                                                           ),
                                                             init=Constant(type='int',
                                                                           value='0'
                                                                           ),
                                                             bitsize=None
                                                             )
                                                       ]
                                                 ),
                                   cond=BinaryOp(op='<',
                                                 left=ID(name='k2'
                                                         ),
                                                 right=ID(name='size'
                                                          )
                                                 ),
                                   next=UnaryOp(op='++',
                                                expr=ID(name='k2'
                                                        )
                                                ),
                                   stmt=Assignment(op='=',
                                                   lvalue=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                         ),
                                                                                 subscript=ID(name='k1'
                                                                                              )
                                                                                 ),
                                                                   subscript=ID(name='k2'
                                                                                )
                                                                   ),
                                                   rvalue=Constant(type='double',
                                                                   value='0.'
                                                                   )
                                                   )
                                   )
                              ]
                  )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='k1',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='k1',
                   quals=[
                         ],
                   type=IdentifierType(names=['long'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  k1  =  0
visit node visit_ID
visit node visit_ID
k1 < 3
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: k2, [], [], []
        TypeDecl: k2, []
          IdentifierType: ['long']
        Constant: int, 0
    BinaryOp: <
      ID: k2
      ID: size
    UnaryOp: ++
      ID: k2
    Assignment: =
      ArrayRef: 
        ArrayRef: 
          ID: def_grad
          ID: k1
        ID: k2
      Constant: double, 0.
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='k2',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='k2',
                   quals=[
                         ],
                   type=IdentifierType(names=['long'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  k2  =  0
visit node visit_ID
visit node visit_ID
k2 < 3
Statement of loop
[array([0, 1, 2]), array([0, 1, 2])]
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [1 1]
 [1 2]
 [2 0]
 [2 1]
 [2 2]]
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
visit node visit_Constant
Returning stuff ['def_grad', '0', '0'] 0.
====================================
double def_grad[0][0] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
visit node visit_Constant
Returning stuff ['def_grad', '0', '1'] 0.
====================================
double def_grad[0][1] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
visit node visit_Constant
Returning stuff ['def_grad', '0', '2'] 0.
====================================
double def_grad[0][2] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
visit node visit_Constant
Returning stuff ['def_grad', '1', '0'] 0.
====================================
double def_grad[1][0] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
visit node visit_Constant
Returning stuff ['def_grad', '1', '1'] 0.
====================================
double def_grad[1][1] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
visit node visit_Constant
Returning stuff ['def_grad', '1', '2'] 0.
====================================
double def_grad[1][2] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
visit node visit_Constant
Returning stuff ['def_grad', '2', '0'] 0.
====================================
double def_grad[2][0] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
visit node visit_Constant
Returning stuff ['def_grad', '2', '1'] 0.
====================================
double def_grad[2][1] = 0.;
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
visit node visit_Constant
Returning stuff ['def_grad', '2', '2'] 0.
====================================
double def_grad[2][2] = 0.;
====================================
Deleting variables:  ['k1', 'k2']
In match item
For(init=DeclList(decls=[Decl(name='i',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='i',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['int'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='i'
                          ),
                  right=ID(name='n_grads'
                           )
                  ),
    next=UnaryOp(op='++',
                 expr=ID(name='i'
                         )
                 ),
    stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='d',
                                                             quals=[
                                                                   ],
                                                             storage=[
                                                                     ],
                                                             funcspec=[
                                                                      ],
                                                             type=TypeDecl(declname='d',
                                                                           quals=[
                                                                                 ],
                                                                           type=IdentifierType(names=['int'
                                                                                                     ]
                                                                                               )
                                                                           ),
                                                             init=Constant(type='int',
                                                                           value='0'
                                                                           ),
                                                             bitsize=None
                                                             )
                                                       ]
                                                 ),
                                   cond=BinaryOp(op='<',
                                                 left=ID(name='d'
                                                         ),
                                                 right=ID(name='size'
                                                          )
                                                 ),
                                   next=UnaryOp(op='++',
                                                expr=ID(name='d'
                                                        )
                                                ),
                                   stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='c',
                                                                                            quals=[
                                                                                                  ],
                                                                                            storage=[
                                                                                                    ],
                                                                                            funcspec=[
                                                                                                     ],
                                                                                            type=TypeDecl(declname='c',
                                                                                                          quals=[
                                                                                                                ],
                                                                                                          type=IdentifierType(names=['int'
                                                                                                                                    ]
                                                                                                                              )
                                                                                                          ),
                                                                                            init=Constant(type='int',
                                                                                                          value='0'
                                                                                                          ),
                                                                                            bitsize=None
                                                                                            )
                                                                                      ]
                                                                                ),
                                                                  cond=BinaryOp(op='<',
                                                                                left=ID(name='c'
                                                                                        ),
                                                                                right=ID(name='size'
                                                                                         )
                                                                                ),
                                                                  next=UnaryOp(op='++',
                                                                               expr=ID(name='c'
                                                                                       )
                                                                               ),
                                                                  stmt=Compound(block_items=[Assignment(op='=',
                                                                                                        lvalue=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                                                                              ),
                                                                                                                                      subscript=ID(name='d'
                                                                                                                                                   )
                                                                                                                                      ),
                                                                                                                        subscript=ID(name='c'
                                                                                                                                     )
                                                                                                                        ),
                                                                                                        rvalue=BinaryOp(op='+',
                                                                                                                        left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                                                                                            ),
                                                                                                                                                    subscript=ID(name='d'
                                                                                                                                                                 )
                                                                                                                                                    ),
                                                                                                                                      subscript=ID(name='c'
                                                                                                                                                   )
                                                                                                                                      ),
                                                                                                                        right=BinaryOp(op='*',
                                                                                                                                       left=ArrayRef(name=ID(name='grads'
                                                                                                                                                             ),
                                                                                                                                                     subscript=BinaryOp(op='+',
                                                                                                                                                                        left=BinaryOp(op='*',
                                                                                                                                                                                      left=BinaryOp(op='+',
                                                                                                                                                                                                    left=ID(name='i'
                                                                                                                                                                                                            ),
                                                                                                                                                                                                    right=BinaryOp(op='*',
                                                                                                                                                                                                                   left=ID(name='p'
                                                                                                                                                                                                                           ),
                                                                                                                                                                                                                   right=ID(name='n_grads'
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                   )
                                                                                                                                                                                                    ),
                                                                                                                                                                                      right=ID(name='size'
                                                                                                                                                                                               )
                                                                                                                                                                                      ),
                                                                                                                                                                        right=ID(name='c'
                                                                                                                                                                                 )
                                                                                                                                                                        )
                                                                                                                                                     ),
                                                                                                                                       right=ArrayRef(name=ID(name='local_disp'
                                                                                                                                                              ),
                                                                                                                                                      subscript=BinaryOp(op='+',
                                                                                                                                                                         left=BinaryOp(op='*',
                                                                                                                                                                                       left=ID(name='i'
                                                                                                                                                                                               ),
                                                                                                                                                                                       right=ID(name='size'
                                                                                                                                                                                                )
                                                                                                                                                                                       ),
                                                                                                                                                                         right=ID(name='d'
                                                                                                                                                                                  )
                                                                                                                                                                         )
                                                                                                                                                      )
                                                                                                                                       )
                                                                                                                        )
                                                                                                        )
                                                                                            ]
                                                                                )
                                                                  )
                                                             ]
                                                 )
                                   )
                              ]
                  )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='i',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='i',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  i  =  0
visit node visit_ID
visit node visit_ID
i < 10
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: d, [], [], []
        TypeDecl: d, []
          IdentifierType: ['int']
        Constant: int, 0
    BinaryOp: <
      ID: d
      ID: size
    UnaryOp: ++
      ID: d
    Compound: 
      For: 
        DeclList: 
          Decl: c, [], [], []
            TypeDecl: c, []
              IdentifierType: ['int']
            Constant: int, 0
        BinaryOp: <
          ID: c
          ID: size
        UnaryOp: ++
          ID: c
        Compound: 
          Assignment: =
            ArrayRef: 
              ArrayRef: 
                ID: def_grad
                ID: d
              ID: c
            BinaryOp: +
              ArrayRef: 
                ArrayRef: 
                  ID: def_grad
                  ID: d
                ID: c
              BinaryOp: *
                ArrayRef: 
                  ID: grads
                  BinaryOp: +
                    BinaryOp: *
                      BinaryOp: +
                        ID: i
                        BinaryOp: *
                          ID: p
                          ID: n_grads
                      ID: size
                    ID: c
                ArrayRef: 
                  ID: local_disp
                  BinaryOp: +
                    BinaryOp: *
                      ID: i
                      ID: size
                    ID: d
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='d',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='d',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  d  =  0
visit node visit_ID
visit node visit_ID
d < 3
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: c, [], [], []
        TypeDecl: c, []
          IdentifierType: ['int']
        Constant: int, 0
    BinaryOp: <
      ID: c
      ID: size
    UnaryOp: ++
      ID: c
    Compound: 
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: def_grad
            ID: d
          ID: c
        BinaryOp: +
          ArrayRef: 
            ArrayRef: 
              ID: def_grad
              ID: d
            ID: c
          BinaryOp: *
            ArrayRef: 
              ID: grads
              BinaryOp: +
                BinaryOp: *
                  BinaryOp: +
                    ID: i
                    BinaryOp: *
                      ID: p
                      ID: n_grads
                  ID: size
                ID: c
            ArrayRef: 
              ID: local_disp
              BinaryOp: +
                BinaryOp: *
                  ID: i
                  ID: size
                ID: d
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='c',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='c',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  c  =  0
visit node visit_ID
visit node visit_ID
c < 3
Statement of loop
[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 2]), array([0, 1, 2])]
[[0 0 0]
 [0 1 0]
 [0 2 0]
 [1 0 0]
 [1 1 0]
 [1 2 0]
 [2 0 0]
 [2 1 0]
 [2 2 0]
 [3 0 0]
 [3 1 0]
 [3 2 0]
 [4 0 0]
 [4 1 0]
 [4 2 0]
 [5 0 0]
 [5 1 0]
 [5 2 0]
 [6 0 0]
 [6 1 0]
 [6 2 0]
 [7 0 0]
 [7 1 0]
 [7 2 0]
 [8 0 0]
 [8 1 0]
 [8 2 0]
 [9 0 0]
 [9 1 0]
 [9 2 0]
 [0 0 1]
 [0 1 1]
 [0 2 1]
 [1 0 1]
 [1 1 1]
 [1 2 1]
 [2 0 1]
 [2 1 1]
 [2 2 1]
 [3 0 1]
 [3 1 1]
 [3 2 1]
 [4 0 1]
 [4 1 1]
 [4 2 1]
 [5 0 1]
 [5 1 1]
 [5 2 1]
 [6 0 1]
 [6 1 1]
 [6 2 1]
 [7 0 1]
 [7 1 1]
 [7 2 1]
 [8 0 1]
 [8 1 1]
 [8 2 1]
 [9 0 1]
 [9 1 1]
 [9 2 1]
 [0 0 2]
 [0 1 2]
 [0 2 2]
 [1 0 2]
 [1 1 2]
 [1 2 2]
 [2 0 2]
 [2 1 2]
 [2 2 2]
 [3 0 2]
 [3 1 2]
 [3 2 2]
 [4 0 2]
 [4 1 2]
 [4 2 2]
 [5 0 2]
 [5 1 2]
 [5 2 2]
 [6 0 2]
 [6 1 2]
 [6 2 2]
 [7 0 2]
 [7 1 2]
 [7 2 2]
 [8 0 2]
 [8 1 2]
 [8 2 2]
 [9 0 2]
 [9 1 2]
 [9 2 2]]
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
in addition
((0) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '0']
in addition
def_grad[0][0]
(grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[0])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[0]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
in addition
((0) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '1']
in addition
def_grad[1][0]
(grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[1])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[1]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
in addition
((0) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '2']
in addition
def_grad[2][0]
(grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[2])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[2]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((0) + ((p) * (10))) * (3)) + (0)]) * (local_disp[2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
in addition
((1) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '3']
in addition
def_grad[0][0]
(grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[3])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[3]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[3]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
in addition
((1) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '4']
in addition
def_grad[1][0]
(grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[4])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[4]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[4]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
in addition
((1) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '5']
in addition
def_grad[2][0]
(grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[5])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[5]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((1) + ((p) * (10))) * (3)) + (0)]) * (local_disp[5]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
in addition
((2) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '6']
in addition
def_grad[0][0]
(grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[6])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[6]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[6]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
in addition
((2) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '7']
in addition
def_grad[1][0]
(grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[7])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[7]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[7]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
in addition
((2) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '8']
in addition
def_grad[2][0]
(grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[8])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[8]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((2) + ((p) * (10))) * (3)) + (0)]) * (local_disp[8]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
in addition
((3) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '9']
in addition
def_grad[0][0]
(grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[9])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[9]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[9]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
in addition
((3) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '10']
in addition
def_grad[1][0]
(grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[10])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[10]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[10]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
in addition
((3) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '11']
in addition
def_grad[2][0]
(grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[11])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[11]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((3) + ((p) * (10))) * (3)) + (0)]) * (local_disp[11]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
in addition
((4) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '12']
in addition
def_grad[0][0]
(grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[12])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[12]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[12]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
in addition
((4) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '13']
in addition
def_grad[1][0]
(grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[13])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[13]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[13]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
in addition
((4) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '14']
in addition
def_grad[2][0]
(grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[14])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[14]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((4) + ((p) * (10))) * (3)) + (0)]) * (local_disp[14]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
in addition
((5) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '15']
in addition
def_grad[0][0]
(grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[15])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[15]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[15]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
in addition
((5) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '16']
in addition
def_grad[1][0]
(grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[16])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[16]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[16]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
in addition
((5) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '17']
in addition
def_grad[2][0]
(grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[17])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[17]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((5) + ((p) * (10))) * (3)) + (0)]) * (local_disp[17]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
in addition
((6) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '18']
in addition
def_grad[0][0]
(grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[18])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[18]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[18]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
in addition
((6) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '19']
in addition
def_grad[1][0]
(grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[19])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[19]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[19]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
in addition
((6) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '20']
in addition
def_grad[2][0]
(grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[20])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[20]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((6) + ((p) * (10))) * (3)) + (0)]) * (local_disp[20]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
in addition
((7) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '21']
in addition
def_grad[0][0]
(grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[21])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[21]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[21]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
in addition
((7) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '22']
in addition
def_grad[1][0]
(grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[22])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[22]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[22]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
in addition
((7) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '23']
in addition
def_grad[2][0]
(grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[23])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[23]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((7) + ((p) * (10))) * (3)) + (0)]) * (local_disp[23]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
in addition
((8) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '24']
in addition
def_grad[0][0]
(grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[24])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[24]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[24]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
in addition
((8) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '25']
in addition
def_grad[1][0]
(grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[25])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[25]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[25]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
in addition
((8) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '26']
in addition
def_grad[2][0]
(grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[26])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[26]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((8) + ((p) * (10))) * (3)) + (0)]) * (local_disp[26]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
in addition
((9) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '27']
in addition
def_grad[0][0]
(grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[27])
=======================
Returning stuff ['def_grad', '0', '0'] (def_grad[0][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[27]))
====================================
double def_grad[0][0] = (def_grad[0][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[27]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
in addition
((9) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '28']
in addition
def_grad[1][0]
(grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[28])
=======================
Returning stuff ['def_grad', '1', '0'] (def_grad[1][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[28]))
====================================
double def_grad[1][0] = (def_grad[1][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[28]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
in addition
((9) + ((p) * (10))) * (3)
0
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (0)']
right:  ['local_disp', '29']
in addition
def_grad[2][0]
(grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[29])
=======================
Returning stuff ['def_grad', '2', '0'] (def_grad[2][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[29]))
====================================
double def_grad[2][0] = (def_grad[2][0]) + ((grads[(((9) + ((p) * (10))) * (3)) + (0)]) * (local_disp[29]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
in addition
((0) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '0']
in addition
def_grad[0][1]
(grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[0])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[0]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
in addition
((0) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '1']
in addition
def_grad[1][1]
(grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[1])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[1]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
in addition
((0) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '2']
in addition
def_grad[2][1]
(grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[2])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[2]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((0) + ((p) * (10))) * (3)) + (1)]) * (local_disp[2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
in addition
((1) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '3']
in addition
def_grad[0][1]
(grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[3])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[3]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[3]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
in addition
((1) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '4']
in addition
def_grad[1][1]
(grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[4])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[4]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[4]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
in addition
((1) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '5']
in addition
def_grad[2][1]
(grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[5])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[5]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((1) + ((p) * (10))) * (3)) + (1)]) * (local_disp[5]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
in addition
((2) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '6']
in addition
def_grad[0][1]
(grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[6])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[6]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[6]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
in addition
((2) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '7']
in addition
def_grad[1][1]
(grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[7])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[7]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[7]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
in addition
((2) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '8']
in addition
def_grad[2][1]
(grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[8])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[8]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((2) + ((p) * (10))) * (3)) + (1)]) * (local_disp[8]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
in addition
((3) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '9']
in addition
def_grad[0][1]
(grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[9])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[9]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[9]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
in addition
((3) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '10']
in addition
def_grad[1][1]
(grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[10])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[10]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[10]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
in addition
((3) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '11']
in addition
def_grad[2][1]
(grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[11])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[11]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((3) + ((p) * (10))) * (3)) + (1)]) * (local_disp[11]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
in addition
((4) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '12']
in addition
def_grad[0][1]
(grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[12])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[12]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[12]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
in addition
((4) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '13']
in addition
def_grad[1][1]
(grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[13])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[13]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[13]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
in addition
((4) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '14']
in addition
def_grad[2][1]
(grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[14])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[14]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((4) + ((p) * (10))) * (3)) + (1)]) * (local_disp[14]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
in addition
((5) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '15']
in addition
def_grad[0][1]
(grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[15])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[15]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[15]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
in addition
((5) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '16']
in addition
def_grad[1][1]
(grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[16])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[16]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[16]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
in addition
((5) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '17']
in addition
def_grad[2][1]
(grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[17])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[17]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((5) + ((p) * (10))) * (3)) + (1)]) * (local_disp[17]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
in addition
((6) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '18']
in addition
def_grad[0][1]
(grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[18])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[18]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[18]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
in addition
((6) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '19']
in addition
def_grad[1][1]
(grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[19])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[19]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[19]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
in addition
((6) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '20']
in addition
def_grad[2][1]
(grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[20])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[20]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((6) + ((p) * (10))) * (3)) + (1)]) * (local_disp[20]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
in addition
((7) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '21']
in addition
def_grad[0][1]
(grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[21])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[21]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[21]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
in addition
((7) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '22']
in addition
def_grad[1][1]
(grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[22])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[22]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[22]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
in addition
((7) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '23']
in addition
def_grad[2][1]
(grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[23])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[23]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((7) + ((p) * (10))) * (3)) + (1)]) * (local_disp[23]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
in addition
((8) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '24']
in addition
def_grad[0][1]
(grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[24])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[24]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[24]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
in addition
((8) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '25']
in addition
def_grad[1][1]
(grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[25])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[25]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[25]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
in addition
((8) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '26']
in addition
def_grad[2][1]
(grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[26])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[26]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((8) + ((p) * (10))) * (3)) + (1)]) * (local_disp[26]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
in addition
((9) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '27']
in addition
def_grad[0][1]
(grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[27])
=======================
Returning stuff ['def_grad', '0', '1'] (def_grad[0][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[27]))
====================================
double def_grad[0][1] = (def_grad[0][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[27]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
in addition
((9) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '28']
in addition
def_grad[1][1]
(grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[28])
=======================
Returning stuff ['def_grad', '1', '1'] (def_grad[1][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[28]))
====================================
double def_grad[1][1] = (def_grad[1][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[28]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
in addition
((9) + ((p) * (10))) * (3)
1
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (1)']
right:  ['local_disp', '29']
in addition
def_grad[2][1]
(grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[29])
=======================
Returning stuff ['def_grad', '2', '1'] (def_grad[2][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[29]))
====================================
double def_grad[2][1] = (def_grad[2][1]) + ((grads[(((9) + ((p) * (10))) * (3)) + (1)]) * (local_disp[29]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
in addition
((0) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '0']
in addition
def_grad[0][2]
(grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[0])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[0]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
in addition
((0) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '1']
in addition
def_grad[1][2]
(grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[1])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[1]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
0
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (0) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
in addition
((0) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '0', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((0) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '2']
in addition
def_grad[2][2]
(grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[2])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[2]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((0) + ((p) * (10))) * (3)) + (2)]) * (local_disp[2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
in addition
((1) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '3']
in addition
def_grad[0][2]
(grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[3])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[3]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[3]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
in addition
((1) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '4']
in addition
def_grad[1][2]
(grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[4])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[4]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[4]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
1
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (1) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
in addition
((1) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '1', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((1) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '5']
in addition
def_grad[2][2]
(grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[5])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[5]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((1) + ((p) * (10))) * (3)) + (2)]) * (local_disp[5]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
in addition
((2) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '6']
in addition
def_grad[0][2]
(grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[6])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[6]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[6]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
in addition
((2) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '7']
in addition
def_grad[1][2]
(grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[7])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[7]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[7]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
2
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (2) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
in addition
((2) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '2', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((2) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '8']
in addition
def_grad[2][2]
(grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[8])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[8]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((2) + ((p) * (10))) * (3)) + (2)]) * (local_disp[8]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
in addition
((3) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '9']
in addition
def_grad[0][2]
(grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[9])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[9]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[9]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
in addition
((3) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '10']
in addition
def_grad[1][2]
(grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[10])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[10]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[10]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
3
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (3) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
in addition
((3) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 3
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '3', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((3) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '11']
in addition
def_grad[2][2]
(grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[11])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[11]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((3) + ((p) * (10))) * (3)) + (2)]) * (local_disp[11]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
in addition
((4) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '12']
in addition
def_grad[0][2]
(grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[12])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[12]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[12]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
in addition
((4) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '13']
in addition
def_grad[1][2]
(grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[13])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[13]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[13]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
4
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (4) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
in addition
((4) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 4
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '4', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((4) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '14']
in addition
def_grad[2][2]
(grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[14])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[14]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((4) + ((p) * (10))) * (3)) + (2)]) * (local_disp[14]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
in addition
((5) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '15']
in addition
def_grad[0][2]
(grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[15])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[15]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[15]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
in addition
((5) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '16']
in addition
def_grad[1][2]
(grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[16])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[16]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[16]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
5
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (5) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
in addition
((5) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 5
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '5', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((5) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '17']
in addition
def_grad[2][2]
(grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[17])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[17]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((5) + ((p) * (10))) * (3)) + (2)]) * (local_disp[17]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
in addition
((6) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '18']
in addition
def_grad[0][2]
(grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[18])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[18]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[18]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
in addition
((6) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '19']
in addition
def_grad[1][2]
(grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[19])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[19]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[19]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
6
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (6) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
in addition
((6) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 6
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '6', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((6) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '20']
in addition
def_grad[2][2]
(grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[20])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[20]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((6) + ((p) * (10))) * (3)) + (2)]) * (local_disp[20]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
in addition
((7) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '21']
in addition
def_grad[0][2]
(grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[21])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[21]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[21]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
in addition
((7) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '22']
in addition
def_grad[1][2]
(grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[22])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[22]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[22]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
7
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (7) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
in addition
((7) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 7
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '7', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((7) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '23']
in addition
def_grad[2][2]
(grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[23])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[23]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((7) + ((p) * (10))) * (3)) + (2)]) * (local_disp[23]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
in addition
((8) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '24']
in addition
def_grad[0][2]
(grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[24])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[24]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[24]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
in addition
((8) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '25']
in addition
def_grad[1][2]
(grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[25])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[25]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[25]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
8
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (8) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
in addition
((8) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 8
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '8', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((8) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '26']
in addition
def_grad[2][2]
(grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[26])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[26]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((8) + ((p) * (10))) * (3)) + (2)]) * (local_disp[26]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
in addition
((9) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '0', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '27']
in addition
def_grad[0][2]
(grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[27])
=======================
Returning stuff ['def_grad', '0', '2'] (def_grad[0][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[27]))
====================================
double def_grad[0][2] = (def_grad[0][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[27]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
in addition
((9) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '1', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '28']
in addition
def_grad[1][2]
(grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[28])
=======================
Returning stuff ['def_grad', '1', '2'] (def_grad[1][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[28]))
====================================
double def_grad[1][2] = (def_grad[1][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[28]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='n_grads'
                  )
         )
left: p
right:  10
in addition
9
(p) * (10)
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='+',
                       left=ID(name='i'
                               ),
                       right=BinaryOp(op='*',
                                      left=ID(name='p'
                                              ),
                                      right=ID(name='n_grads'
                                               )
                                      )
                       ),
         right=ID(name='size'
                  )
         )
left: (9) + ((p) * (10))
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
in addition
((9) + ((p) * (10))) * (3)
2
=======================
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ID(name='i'
                 ),
         right=ID(name='size'
                  )
         )
left: 9
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'i': '9', 'd': '2', 'c': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ID(name='grads'
                               ),
                       subscript=BinaryOp(op='+',
                                          left=BinaryOp(op='*',
                                                        left=BinaryOp(op='+',
                                                                      left=ID(name='i'
                                                                              ),
                                                                      right=BinaryOp(op='*',
                                                                                     left=ID(name='p'
                                                                                             ),
                                                                                     right=ID(name='n_grads'
                                                                                              )
                                                                                     )
                                                                      ),
                                                        right=ID(name='size'
                                                                 )
                                                        ),
                                          right=ID(name='c'
                                                   )
                                          )
                       ),
         right=ArrayRef(name=ID(name='local_disp'
                                ),
                        subscript=BinaryOp(op='+',
                                           left=BinaryOp(op='*',
                                                         left=ID(name='i'
                                                                 ),
                                                         right=ID(name='size'
                                                                  )
                                                         ),
                                           right=ID(name='d'
                                                    )
                                           )
                        )
         )
left: ['grads', '(((9) + ((p) * (10))) * (3)) + (2)']
right:  ['local_disp', '29']
in addition
def_grad[2][2]
(grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[29])
=======================
Returning stuff ['def_grad', '2', '2'] (def_grad[2][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[29]))
====================================
double def_grad[2][2] = (def_grad[2][2]) + ((grads[(((9) + ((p) * (10))) * (3)) + (2)]) * (local_disp[29]));
====================================
Deleting variables:  ['i', 'd', 'c']
In match item
For(init=DeclList(decls=[Decl(name='k1',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='k1',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['long'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='k1'
                          ),
                  right=ID(name='size'
                           )
                  ),
    next=UnaryOp(op='++',
                 expr=ID(name='k1'
                         )
                 ),
    stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='k2',
                                                             quals=[
                                                                   ],
                                                             storage=[
                                                                     ],
                                                             funcspec=[
                                                                      ],
                                                             type=TypeDecl(declname='k2',
                                                                           quals=[
                                                                                 ],
                                                                           type=IdentifierType(names=['long'
                                                                                                     ]
                                                                                               )
                                                                           ),
                                                             init=Constant(type='int',
                                                                           value='0'
                                                                           ),
                                                             bitsize=None
                                                             )
                                                       ]
                                                 ),
                                   cond=BinaryOp(op='<',
                                                 left=ID(name='k2'
                                                         ),
                                                 right=ID(name='size'
                                                          )
                                                 ),
                                   next=UnaryOp(op='++',
                                                expr=ID(name='k2'
                                                        )
                                                ),
                                   stmt=Compound(block_items=[Assignment(op='=',
                                                                         lvalue=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                                                                                               ),
                                                                                                       subscript=ID(name='k1'
                                                                                                                    )
                                                                                                       ),
                                                                                         subscript=ID(name='k2'
                                                                                                      )
                                                                                         ),
                                                                         rvalue=ArrayRef(name=ID(name='vjac_it'
                                                                                                 ),
                                                                                         subscript=BinaryOp(op='+',
                                                                                                            left=BinaryOp(op='+',
                                                                                                                          left=BinaryOp(op='*',
                                                                                                                                        left=BinaryOp(op='*',
                                                                                                                                                      left=ID(name='p'
                                                                                                                                                              ),
                                                                                                                                                      right=ID(name='size'
                                                                                                                                                               )
                                                                                                                                                      ),
                                                                                                                                        right=ID(name='size'
                                                                                                                                                 )
                                                                                                                                        ),
                                                                                                                          right=BinaryOp(op='*',
                                                                                                                                         left=ID(name='k2'
                                                                                                                                                 ),
                                                                                                                                         right=ID(name='size'
                                                                                                                                                  )
                                                                                                                                         )
                                                                                                                          ),
                                                                                                            right=ID(name='k1'
                                                                                                                     )
                                                                                                            )
                                                                                         )
                                                                         )
                                                             ]
                                                 )
                                   )
                              ]
                  )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='k1',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='k1',
                   quals=[
                         ],
                   type=IdentifierType(names=['long'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  k1  =  0
visit node visit_ID
visit node visit_ID
k1 < 3
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: k2, [], [], []
        TypeDecl: k2, []
          IdentifierType: ['long']
        Constant: int, 0
    BinaryOp: <
      ID: k2
      ID: size
    UnaryOp: ++
      ID: k2
    Compound: 
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: jac_it
            ID: k1
          ID: k2
        ArrayRef: 
          ID: vjac_it
          BinaryOp: +
            BinaryOp: +
              BinaryOp: *
                BinaryOp: *
                  ID: p
                  ID: size
                ID: size
              BinaryOp: *
                ID: k2
                ID: size
            ID: k1
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='k2',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='k2',
                   quals=[
                         ],
                   type=IdentifierType(names=['long'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  k2  =  0
visit node visit_ID
visit node visit_ID
k2 < 3
Statement of loop
[array([0, 1, 2]), array([0, 1, 2])]
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [1 1]
 [1 2]
 [2 0]
 [2 1]
 [2 2]]
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
in addition
((p) * (3)) * (3)
0
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '0'}
in addition
(((p) * (3)) * (3)) + (0)
0
=======================
Returning stuff ['jac_it', '0', '0'] vjac_it[((((p) * (3)) * (3)) + (0)) + (0)]
====================================
double jac_it[0][0] = vjac_it[((((p) * (3)) * (3)) + (0)) + (0)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
in addition
((p) * (3)) * (3)
3
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '1'}
in addition
(((p) * (3)) * (3)) + (3)
0
=======================
Returning stuff ['jac_it', '0', '1'] vjac_it[((((p) * (3)) * (3)) + (3)) + (0)]
====================================
double jac_it[0][1] = vjac_it[((((p) * (3)) * (3)) + (3)) + (0)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
in addition
((p) * (3)) * (3)
6
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '0', 'k2': '2'}
in addition
(((p) * (3)) * (3)) + (6)
0
=======================
Returning stuff ['jac_it', '0', '2'] vjac_it[((((p) * (3)) * (3)) + (6)) + (0)]
====================================
double jac_it[0][2] = vjac_it[((((p) * (3)) * (3)) + (6)) + (0)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
in addition
((p) * (3)) * (3)
0
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '0'}
in addition
(((p) * (3)) * (3)) + (0)
1
=======================
Returning stuff ['jac_it', '1', '0'] vjac_it[((((p) * (3)) * (3)) + (0)) + (1)]
====================================
double jac_it[1][0] = vjac_it[((((p) * (3)) * (3)) + (0)) + (1)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
in addition
((p) * (3)) * (3)
3
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '1'}
in addition
(((p) * (3)) * (3)) + (3)
1
=======================
Returning stuff ['jac_it', '1', '1'] vjac_it[((((p) * (3)) * (3)) + (3)) + (1)]
====================================
double jac_it[1][1] = vjac_it[((((p) * (3)) * (3)) + (3)) + (1)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
in addition
((p) * (3)) * (3)
6
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '1', 'k2': '2'}
in addition
(((p) * (3)) * (3)) + (6)
1
=======================
Returning stuff ['jac_it', '1', '2'] vjac_it[((((p) * (3)) * (3)) + (6)) + (1)]
====================================
double jac_it[1][2] = vjac_it[((((p) * (3)) * (3)) + (6)) + (1)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 0
right:  3
in addition
((p) * (3)) * (3)
0
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '0'}
in addition
(((p) * (3)) * (3)) + (0)
2
=======================
Returning stuff ['jac_it', '2', '0'] vjac_it[((((p) * (3)) * (3)) + (0)) + (2)]
====================================
double jac_it[2][0] = vjac_it[((((p) * (3)) * (3)) + (0)) + (2)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 1
right:  3
in addition
((p) * (3)) * (3)
3
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '1'}
in addition
(((p) * (3)) * (3)) + (3)
2
=======================
Returning stuff ['jac_it', '2', '1'] vjac_it[((((p) * (3)) * (3)) + (3)) + (2)]
====================================
double jac_it[2][1] = vjac_it[((((p) * (3)) * (3)) + (3)) + (2)];
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
visit node visit_ArrayRef
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='p'
                 ),
         right=ID(name='size'
                  )
         )
left: p
right:  3
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=ID(name='p'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=ID(name='size'
                  )
         )
left: (p) * (3)
right:  3
visit node visit_BinaryOp
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
BinaryOp(op='*',
         left=ID(name='k2'
                 ),
         right=ID(name='size'
                  )
         )
left: 2
right:  3
in addition
((p) * (3)) * (3)
6
=======================
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'k1': '2', 'k2': '2'}
in addition
(((p) * (3)) * (3)) + (6)
2
=======================
Returning stuff ['jac_it', '2', '2'] vjac_it[((((p) * (3)) * (3)) + (6)) + (2)]
====================================
double jac_it[2][2] = vjac_it[((((p) * (3)) * (3)) + (6)) + (2)];
====================================
Deleting variables:  ['k1', 'k2']
In match item
For(init=DeclList(decls=[Decl(name='c',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='c',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['int'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='c'
                          ),
                  right=ID(name='size'
                           )
                  ),
    next=UnaryOp(op='p++',
                 expr=ID(name='c'
                         )
                 ),
    stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='d',
                                                             quals=[
                                                                   ],
                                                             storage=[
                                                                     ],
                                                             funcspec=[
                                                                      ],
                                                             type=TypeDecl(declname='d',
                                                                           quals=[
                                                                                 ],
                                                                           type=IdentifierType(names=['int'
                                                                                                     ]
                                                                                               )
                                                                           ),
                                                             init=Constant(type='int',
                                                                           value='0'
                                                                           ),
                                                             bitsize=None
                                                             )
                                                       ]
                                                 ),
                                   cond=BinaryOp(op='<',
                                                 left=ID(name='d'
                                                         ),
                                                 right=ID(name='size'
                                                          )
                                                 ),
                                   next=UnaryOp(op='p++',
                                                expr=ID(name='d'
                                                        )
                                                ),
                                   stmt=Compound(block_items=[Assignment(op='=',
                                                                         lvalue=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                               ),
                                                                                                       subscript=ID(name='c'
                                                                                                                    )
                                                                                                       ),
                                                                                         subscript=ID(name='d'
                                                                                                      )
                                                                                         ),
                                                                         rvalue=BinaryOp(op='+',
                                                                                         left=BinaryOp(op='+',
                                                                                                       left=BinaryOp(op='*',
                                                                                                                     left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                                                                                         ),
                                                                                                                                                 subscript=ID(name='c'
                                                                                                                                                              )
                                                                                                                                                 ),
                                                                                                                                   subscript=Constant(type='int',
                                                                                                                                                      value='0'
                                                                                                                                                      )
                                                                                                                                   ),
                                                                                                                     right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                                                                                                                                          ),
                                                                                                                                                  subscript=Constant(type='int',
                                                                                                                                                                     value='0'
                                                                                                                                                                     )
                                                                                                                                                  ),
                                                                                                                                    subscript=ID(name='d'
                                                                                                                                                 )
                                                                                                                                    )
                                                                                                                     ),
                                                                                                       right=BinaryOp(op='*',
                                                                                                                      left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                                                                                          ),
                                                                                                                                                  subscript=ID(name='c'
                                                                                                                                                               )
                                                                                                                                                  ),
                                                                                                                                    subscript=Constant(type='int',
                                                                                                                                                       value='1'
                                                                                                                                                       )
                                                                                                                                    ),
                                                                                                                      right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                                                                                                                                           ),
                                                                                                                                                   subscript=Constant(type='int',
                                                                                                                                                                      value='1'
                                                                                                                                                                      )
                                                                                                                                                   ),
                                                                                                                                     subscript=ID(name='d'
                                                                                                                                                  )
                                                                                                                                     )
                                                                                                                      )
                                                                                                       ),
                                                                                         right=BinaryOp(op='*',
                                                                                                        left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                                                                                                                            ),
                                                                                                                                    subscript=ID(name='c'
                                                                                                                                                 )
                                                                                                                                    ),
                                                                                                                      subscript=Constant(type='int',
                                                                                                                                         value='2'
                                                                                                                                         )
                                                                                                                      ),
                                                                                                        right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                                                                                                                             ),
                                                                                                                                     subscript=Constant(type='int',
                                                                                                                                                        value='2'
                                                                                                                                                        )
                                                                                                                                     ),
                                                                                                                       subscript=ID(name='d'
                                                                                                                                    )
                                                                                                                       )
                                                                                                        )
                                                                                         )
                                                                         )
                                                             ]
                                                 )
                                   )
                              ]
                  )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='c',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='c',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  c  =  0
visit node visit_ID
visit node visit_ID
c < 3
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: d, [], [], []
        TypeDecl: d, []
          IdentifierType: ['int']
        Constant: int, 0
    BinaryOp: <
      ID: d
      ID: size
    UnaryOp: p++
      ID: d
    Compound: 
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: mult
            ID: c
          ID: d
        BinaryOp: +
          BinaryOp: +
            BinaryOp: *
              ArrayRef: 
                ArrayRef: 
                  ID: def_grad
                  ID: c
                Constant: int, 0
              ArrayRef: 
                ArrayRef: 
                  ID: jac_it
                  Constant: int, 0
                ID: d
            BinaryOp: *
              ArrayRef: 
                ArrayRef: 
                  ID: def_grad
                  ID: c
                Constant: int, 1
              ArrayRef: 
                ArrayRef: 
                  ID: jac_it
                  Constant: int, 1
                ID: d
          BinaryOp: *
            ArrayRef: 
              ArrayRef: 
                ID: def_grad
                ID: c
              Constant: int, 2
            ArrayRef: 
              ArrayRef: 
                ID: jac_it
                Constant: int, 2
              ID: d
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='d',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='d',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  d  =  0
visit node visit_ID
visit node visit_ID
d < 3
Statement of loop
[array([0, 1, 2]), array([0, 1, 2])]
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [1 1]
 [1 2]
 [2 0]
 [2 1]
 [2 2]]
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '0']
right:  [['jac_it', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '1']
right:  [['jac_it', '1'], '0']
in addition
(def_grad[0][0]) * (jac_it[0][0])
(def_grad[0][1]) * (jac_it[1][0])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '2']
right:  [['jac_it', '2'], '0']
in addition
((def_grad[0][0]) * (jac_it[0][0])) + ((def_grad[0][1]) * (jac_it[1][0]))
(def_grad[0][2]) * (jac_it[2][0])
=======================
Returning stuff ['mult', '0', '0'] (((def_grad[0][0]) * (jac_it[0][0])) + ((def_grad[0][1]) * (jac_it[1][0]))) + ((def_grad[0][2]) * (jac_it[2][0]))
====================================
double mult[0][0] = (((def_grad[0][0]) * (jac_it[0][0])) + ((def_grad[0][1]) * (jac_it[1][0]))) + ((def_grad[0][2]) * (jac_it[2][0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '0']
right:  [['jac_it', '0'], '1']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '1']
right:  [['jac_it', '1'], '1']
in addition
(def_grad[0][0]) * (jac_it[0][1])
(def_grad[0][1]) * (jac_it[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '2']
right:  [['jac_it', '2'], '1']
in addition
((def_grad[0][0]) * (jac_it[0][1])) + ((def_grad[0][1]) * (jac_it[1][1]))
(def_grad[0][2]) * (jac_it[2][1])
=======================
Returning stuff ['mult', '0', '1'] (((def_grad[0][0]) * (jac_it[0][1])) + ((def_grad[0][1]) * (jac_it[1][1]))) + ((def_grad[0][2]) * (jac_it[2][1]))
====================================
double mult[0][1] = (((def_grad[0][0]) * (jac_it[0][1])) + ((def_grad[0][1]) * (jac_it[1][1]))) + ((def_grad[0][2]) * (jac_it[2][1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '0']
right:  [['jac_it', '0'], '2']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '1']
right:  [['jac_it', '1'], '2']
in addition
(def_grad[0][0]) * (jac_it[0][2])
(def_grad[0][1]) * (jac_it[1][2])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '0', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '0'], '2']
right:  [['jac_it', '2'], '2']
in addition
((def_grad[0][0]) * (jac_it[0][2])) + ((def_grad[0][1]) * (jac_it[1][2]))
(def_grad[0][2]) * (jac_it[2][2])
=======================
Returning stuff ['mult', '0', '2'] (((def_grad[0][0]) * (jac_it[0][2])) + ((def_grad[0][1]) * (jac_it[1][2]))) + ((def_grad[0][2]) * (jac_it[2][2]))
====================================
double mult[0][2] = (((def_grad[0][0]) * (jac_it[0][2])) + ((def_grad[0][1]) * (jac_it[1][2]))) + ((def_grad[0][2]) * (jac_it[2][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '0']
right:  [['jac_it', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '1']
right:  [['jac_it', '1'], '0']
in addition
(def_grad[1][0]) * (jac_it[0][0])
(def_grad[1][1]) * (jac_it[1][0])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '2']
right:  [['jac_it', '2'], '0']
in addition
((def_grad[1][0]) * (jac_it[0][0])) + ((def_grad[1][1]) * (jac_it[1][0]))
(def_grad[1][2]) * (jac_it[2][0])
=======================
Returning stuff ['mult', '1', '0'] (((def_grad[1][0]) * (jac_it[0][0])) + ((def_grad[1][1]) * (jac_it[1][0]))) + ((def_grad[1][2]) * (jac_it[2][0]))
====================================
double mult[1][0] = (((def_grad[1][0]) * (jac_it[0][0])) + ((def_grad[1][1]) * (jac_it[1][0]))) + ((def_grad[1][2]) * (jac_it[2][0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '0']
right:  [['jac_it', '0'], '1']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '1']
right:  [['jac_it', '1'], '1']
in addition
(def_grad[1][0]) * (jac_it[0][1])
(def_grad[1][1]) * (jac_it[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '2']
right:  [['jac_it', '2'], '1']
in addition
((def_grad[1][0]) * (jac_it[0][1])) + ((def_grad[1][1]) * (jac_it[1][1]))
(def_grad[1][2]) * (jac_it[2][1])
=======================
Returning stuff ['mult', '1', '1'] (((def_grad[1][0]) * (jac_it[0][1])) + ((def_grad[1][1]) * (jac_it[1][1]))) + ((def_grad[1][2]) * (jac_it[2][1]))
====================================
double mult[1][1] = (((def_grad[1][0]) * (jac_it[0][1])) + ((def_grad[1][1]) * (jac_it[1][1]))) + ((def_grad[1][2]) * (jac_it[2][1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '0']
right:  [['jac_it', '0'], '2']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '1']
right:  [['jac_it', '1'], '2']
in addition
(def_grad[1][0]) * (jac_it[0][2])
(def_grad[1][1]) * (jac_it[1][2])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '1', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '1'], '2']
right:  [['jac_it', '2'], '2']
in addition
((def_grad[1][0]) * (jac_it[0][2])) + ((def_grad[1][1]) * (jac_it[1][2]))
(def_grad[1][2]) * (jac_it[2][2])
=======================
Returning stuff ['mult', '1', '2'] (((def_grad[1][0]) * (jac_it[0][2])) + ((def_grad[1][1]) * (jac_it[1][2]))) + ((def_grad[1][2]) * (jac_it[2][2]))
====================================
double mult[1][2] = (((def_grad[1][0]) * (jac_it[0][2])) + ((def_grad[1][1]) * (jac_it[1][2]))) + ((def_grad[1][2]) * (jac_it[2][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '0']
right:  [['jac_it', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '1']
right:  [['jac_it', '1'], '0']
in addition
(def_grad[2][0]) * (jac_it[0][0])
(def_grad[2][1]) * (jac_it[1][0])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '0'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '2']
right:  [['jac_it', '2'], '0']
in addition
((def_grad[2][0]) * (jac_it[0][0])) + ((def_grad[2][1]) * (jac_it[1][0]))
(def_grad[2][2]) * (jac_it[2][0])
=======================
Returning stuff ['mult', '2', '0'] (((def_grad[2][0]) * (jac_it[0][0])) + ((def_grad[2][1]) * (jac_it[1][0]))) + ((def_grad[2][2]) * (jac_it[2][0]))
====================================
double mult[2][0] = (((def_grad[2][0]) * (jac_it[0][0])) + ((def_grad[2][1]) * (jac_it[1][0]))) + ((def_grad[2][2]) * (jac_it[2][0]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '0']
right:  [['jac_it', '0'], '1']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '1']
right:  [['jac_it', '1'], '1']
in addition
(def_grad[2][0]) * (jac_it[0][1])
(def_grad[2][1]) * (jac_it[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '1'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '2']
right:  [['jac_it', '2'], '1']
in addition
((def_grad[2][0]) * (jac_it[0][1])) + ((def_grad[2][1]) * (jac_it[1][1]))
(def_grad[2][2]) * (jac_it[2][1])
=======================
Returning stuff ['mult', '2', '1'] (((def_grad[2][0]) * (jac_it[0][1])) + ((def_grad[2][1]) * (jac_it[1][1]))) + ((def_grad[2][2]) * (jac_it[2][1]))
====================================
double mult[2][1] = (((def_grad[2][0]) * (jac_it[0][1])) + ((def_grad[2][1]) * (jac_it[1][1]))) + ((def_grad[2][2]) * (jac_it[2][1]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='0'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '0']
right:  [['jac_it', '0'], '2']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '1']
right:  [['jac_it', '1'], '2']
in addition
(def_grad[2][0]) * (jac_it[0][2])
(def_grad[2][1]) * (jac_it[1][2])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'c': '2', 'd': '2'}
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='def_grad'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='jac_it'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='2'
                                                         )
                                      ),
                        subscript=ID(name='d'
                                     )
                        )
         )
left: [['def_grad', '2'], '2']
right:  [['jac_it', '2'], '2']
in addition
((def_grad[2][0]) * (jac_it[0][2])) + ((def_grad[2][1]) * (jac_it[1][2]))
(def_grad[2][2]) * (jac_it[2][2])
=======================
Returning stuff ['mult', '2', '2'] (((def_grad[2][0]) * (jac_it[0][2])) + ((def_grad[2][1]) * (jac_it[1][2]))) + ((def_grad[2][2]) * (jac_it[2][2]))
====================================
double mult[2][2] = (((def_grad[2][0]) * (jac_it[0][2])) + ((def_grad[2][1]) * (jac_it[1][2]))) + ((def_grad[2][2]) * (jac_it[2][2]));
====================================
Deleting variables:  ['c', 'd']
In match item
For(init=DeclList(decls=[Decl(name='d',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='d',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['int'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='d'
                          ),
                  right=ID(name='size'
                           )
                  ),
    next=UnaryOp(op='++',
                 expr=ID(name='d'
                         )
                 ),
    stmt=Assignment(op='=',
                    lvalue=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                          ),
                                                  subscript=ID(name='d'
                                                               )
                                                  ),
                                    subscript=ID(name='d'
                                                 )
                                    ),
                    rvalue=BinaryOp(op='+',
                                    left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                        ),
                                                                subscript=ID(name='d'
                                                                             )
                                                                ),
                                                  subscript=ID(name='d'
                                                               )
                                                  ),
                                    right=Constant(type='int',
                                                   value='1'
                                                   )
                                    )
                    )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='d',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='d',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  d  =  0
visit node visit_ID
visit node visit_ID
d < 3
Statement of loop
[array([0, 1, 2])]
[[0]
 [1]
 [2]]
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '0'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '0'}
visit node visit_Constant
in addition
mult[0][0]
1
=======================
Returning stuff ['mult', '0', '0'] (mult[0][0]) + (1)
====================================
double mult[0][0] = (mult[0][0]) + (1);
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '1'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '1'}
visit node visit_Constant
in addition
mult[1][1]
1
=======================
Returning stuff ['mult', '1', '1'] (mult[1][1]) + (1)
====================================
double mult[1][1] = (mult[1][1]) + (1);
====================================
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '2'}
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'd': '2'}
visit node visit_Constant
in addition
mult[2][2]
1
=======================
Returning stuff ['mult', '2', '2'] (mult[2][2]) + (1)
====================================
double mult[2][2] = (mult[2][2]) + (1);
====================================
Deleting variables:  ['d']
In match item
Decl(name='det_def_grad',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='det_def_grad',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=BinaryOp(op='-',
                   left=BinaryOp(op='*',
                                 left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                     ),
                                                             subscript=Constant(type='int',
                                                                                value='0'
                                                                                )
                                                             ),
                                               subscript=Constant(type='int',
                                                                  value='0'
                                                                  )
                                               ),
                                 right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                      ),
                                                              subscript=Constant(type='int',
                                                                                 value='1'
                                                                                 )
                                                              ),
                                                subscript=Constant(type='int',
                                                                   value='1'
                                                                   )
                                                )
                                 ),
                   right=BinaryOp(op='*',
                                  left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                      ),
                                                              subscript=Constant(type='int',
                                                                                 value='0'
                                                                                 )
                                                              ),
                                                subscript=Constant(type='int',
                                                                   value='1'
                                                                   )
                                                ),
                                  right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                       ),
                                                               subscript=Constant(type='int',
                                                                                  value='1'
                                                                                  )
                                                               ),
                                                 subscript=Constant(type='int',
                                                                    value='0'
                                                                    )
                                                 )
                                  )
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='det_def_grad',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='det_def_grad',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=BinaryOp(op='-',
                   left=BinaryOp(op='*',
                                 left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                     ),
                                                             subscript=Constant(type='int',
                                                                                value='0'
                                                                                )
                                                             ),
                                               subscript=Constant(type='int',
                                                                  value='0'
                                                                  )
                                               ),
                                 right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                      ),
                                                              subscript=Constant(type='int',
                                                                                 value='1'
                                                                                 )
                                                              ),
                                                subscript=Constant(type='int',
                                                                   value='1'
                                                                   )
                                                )
                                 ),
                   right=BinaryOp(op='*',
                                  left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                      ),
                                                              subscript=Constant(type='int',
                                                                                 value='0'
                                                                                 )
                                                              ),
                                                subscript=Constant(type='int',
                                                                   value='1'
                                                                   )
                                                ),
                                  right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                       ),
                                                               subscript=Constant(type='int',
                                                                                  value='1'
                                                                                  )
                                                               ),
                                                 subscript=Constant(type='int',
                                                                    value='0'
                                                                    )
                                                 )
                                  )
                   ),
     bitsize=None
     )
BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=Constant(type='int',
                                                        value='0'
                                                        )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '0'], '0']
right:  [['mult', '1'], '1']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=Constant(type='int',
                                                        value='0'
                                                        )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '0'], '1']
right:  [['mult', '1'], '0']
BinaryOp(op='-',
         left=BinaryOp(op='*',
                       left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                           ),
                                                   subscript=Constant(type='int',
                                                                      value='0'
                                                                      )
                                                   ),
                                     subscript=Constant(type='int',
                                                        value='0'
                                                        )
                                     ),
                       right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                            ),
                                                    subscript=Constant(type='int',
                                                                       value='1'
                                                                       )
                                                    ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      )
                       ),
         right=BinaryOp(op='*',
                        left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                            ),
                                                    subscript=Constant(type='int',
                                                                       value='0'
                                                                       )
                                                    ),
                                      subscript=Constant(type='int',
                                                         value='1'
                                                         )
                                      ),
                        right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                             ),
                                                     subscript=Constant(type='int',
                                                                        value='1'
                                                                        )
                                                     ),
                                       subscript=Constant(type='int',
                                                          value='0'
                                                          )
                                       )
                        )
         )
left: (mult[0][0]) * (mult[1][1])
right:  (mult[0][1]) * (mult[1][0])
New variable:  det_def_grad  =  ((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))
In match item
For(init=DeclList(decls=[Decl(name='c',
                              quals=[
                                    ],
                              storage=[
                                      ],
                              funcspec=[
                                       ],
                              type=TypeDecl(declname='c',
                                            quals=[
                                                  ],
                                            type=IdentifierType(names=['int'
                                                                      ]
                                                                )
                                            ),
                              init=Constant(type='int',
                                            value='0'
                                            ),
                              bitsize=None
                              )
                        ]
                  ),
    cond=BinaryOp(op='<',
                  left=ID(name='c'
                          ),
                  right=ID(name='size'
                           )
                  ),
    next=UnaryOp(op='p++',
                 expr=ID(name='c'
                         )
                 ),
    stmt=Compound(block_items=[For(init=DeclList(decls=[Decl(name='d',
                                                             quals=[
                                                                   ],
                                                             storage=[
                                                                     ],
                                                             funcspec=[
                                                                      ],
                                                             type=TypeDecl(declname='d',
                                                                           quals=[
                                                                                 ],
                                                                           type=IdentifierType(names=['int'
                                                                                                     ]
                                                                                               )
                                                                           ),
                                                             init=Constant(type='int',
                                                                           value='0'
                                                                           ),
                                                             bitsize=None
                                                             )
                                                       ]
                                                 ),
                                   cond=BinaryOp(op='<',
                                                 left=ID(name='d'
                                                         ),
                                                 right=ID(name='size'
                                                          )
                                                 ),
                                   next=UnaryOp(op='p++',
                                                expr=ID(name='d'
                                                        )
                                                ),
                                   stmt=Compound(block_items=[Assignment(op='=',
                                                                         lvalue=ArrayRef(name=ArrayRef(name=ID(name='mult1'
                                                                                                               ),
                                                                                                       subscript=ID(name='c'
                                                                                                                    )
                                                                                                       ),
                                                                                         subscript=ID(name='d'
                                                                                                      )
                                                                                         ),
                                                                         rvalue=BinaryOp(op='+',
                                                                                         left=BinaryOp(op='+',
                                                                                                       left=BinaryOp(op='*',
                                                                                                                     left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                                         ),
                                                                                                                                                 subscript=ID(name='c'
                                                                                                                                                              )
                                                                                                                                                 ),
                                                                                                                                   subscript=Constant(type='int',
                                                                                                                                                      value='0'
                                                                                                                                                      )
                                                                                                                                   ),
                                                                                                                     right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                                          ),
                                                                                                                                                  subscript=ID(name='d'
                                                                                                                                                               )
                                                                                                                                                  ),
                                                                                                                                    subscript=Constant(type='int',
                                                                                                                                                       value='0'
                                                                                                                                                       )
                                                                                                                                    )
                                                                                                                     ),
                                                                                                       right=BinaryOp(op='*',
                                                                                                                      left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                                          ),
                                                                                                                                                  subscript=ID(name='c'
                                                                                                                                                               )
                                                                                                                                                  ),
                                                                                                                                    subscript=Constant(type='int',
                                                                                                                                                       value='1'
                                                                                                                                                       )
                                                                                                                                    ),
                                                                                                                      right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                                           ),
                                                                                                                                                   subscript=ID(name='d'
                                                                                                                                                                )
                                                                                                                                                   ),
                                                                                                                                     subscript=Constant(type='int',
                                                                                                                                                        value='1'
                                                                                                                                                        )
                                                                                                                                     )
                                                                                                                      )
                                                                                                       ),
                                                                                         right=BinaryOp(op='*',
                                                                                                        left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                            ),
                                                                                                                                    subscript=ID(name='c'
                                                                                                                                                 )
                                                                                                                                    ),
                                                                                                                      subscript=Constant(type='int',
                                                                                                                                         value='2'
                                                                                                                                         )
                                                                                                                      ),
                                                                                                        right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                                                                                                                             ),
                                                                                                                                     subscript=ID(name='d'
                                                                                                                                                  )
                                                                                                                                     ),
                                                                                                                       subscript=Constant(type='int',
                                                                                                                                          value='2'
                                                                                                                                          )
                                                                                                                       )
                                                                                                        )
                                                                                         )
                                                                         )
                                                             ]
                                                 )
                                   )
                              ]
                  )
    )
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='c',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='c',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  c  =  0
visit node visit_ID
visit node visit_ID
c < 3
Statement of loop
Nested for loop detected
Compound: 
  For: 
    DeclList: 
      Decl: d, [], [], []
        TypeDecl: d, []
          IdentifierType: ['int']
        Constant: int, 0
    BinaryOp: <
      ID: d
      ID: size
    UnaryOp: p++
      ID: d
    Compound: 
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: mult1
            ID: c
          ID: d
        BinaryOp: +
          BinaryOp: +
            BinaryOp: *
              ArrayRef: 
                ArrayRef: 
                  ID: mult
                  ID: c
                Constant: int, 0
              ArrayRef: 
                ArrayRef: 
                  ID: mult
                  ID: d
                Constant: int, 0
            BinaryOp: *
              ArrayRef: 
                ArrayRef: 
                  ID: mult
                  ID: c
                Constant: int, 1
              ArrayRef: 
                ArrayRef: 
                  ID: mult
                  ID: d
                Constant: int, 1
          BinaryOp: *
            ArrayRef: 
              ArrayRef: 
                ID: mult
                ID: c
              Constant: int, 2
            ArrayRef: 
              ArrayRef: 
                ID: mult
                ID: d
              Constant: int, 2
visit node visit_Compound
visit node visit_For
For loop detected
visit node visit_DeclList
visit node visit_Decl
Decl(name='d',
     quals=[
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='d',
                   quals=[
                         ],
                   type=IdentifierType(names=['int'
                                             ]
                                       )
                   ),
     init=Constant(type='int',
                   value='0'
                   ),
     bitsize=None
     )
Constant
New variable:  d  =  0
visit node visit_ID
visit node visit_ID
d < 3
Statement of loop
[array([0, 1, 2]), array([0, 1, 2])]
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [1 1]
 [1 2]
 [2 0]
 [2 1]
 [2 2]]
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '0'], '0']
right:  [['mult', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '0'], '1']
right:  [['mult', '0'], '1']
in addition
(mult[0][0]) * (mult[0][0])
(mult[0][1]) * (mult[0][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '0'], '2']
right:  [['mult', '0'], '2']
in addition
((mult[0][0]) * (mult[0][0])) + ((mult[0][1]) * (mult[0][1]))
(mult[0][2]) * (mult[0][2])
=======================
Returning stuff ['mult1', '0', '0'] (((mult[0][0]) * (mult[0][0])) + ((mult[0][1]) * (mult[0][1]))) + ((mult[0][2]) * (mult[0][2]))
====================================
double mult1[0][0] = (((mult[0][0]) * (mult[0][0])) + ((mult[0][1]) * (mult[0][1]))) + ((mult[0][2]) * (mult[0][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '0'], '0']
right:  [['mult', '1'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '0'], '1']
right:  [['mult', '1'], '1']
in addition
(mult[0][0]) * (mult[1][0])
(mult[0][1]) * (mult[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '0'], '2']
right:  [['mult', '1'], '2']
in addition
((mult[0][0]) * (mult[1][0])) + ((mult[0][1]) * (mult[1][1]))
(mult[0][2]) * (mult[1][2])
=======================
Returning stuff ['mult1', '0', '1'] (((mult[0][0]) * (mult[1][0])) + ((mult[0][1]) * (mult[1][1]))) + ((mult[0][2]) * (mult[1][2]))
====================================
double mult1[0][1] = (((mult[0][0]) * (mult[1][0])) + ((mult[0][1]) * (mult[1][1]))) + ((mult[0][2]) * (mult[1][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '0'], '0']
right:  [['mult', '2'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '0'], '1']
right:  [['mult', '2'], '1']
in addition
(mult[0][0]) * (mult[2][0])
(mult[0][1]) * (mult[2][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '0', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '0'], '2']
right:  [['mult', '2'], '2']
in addition
((mult[0][0]) * (mult[2][0])) + ((mult[0][1]) * (mult[2][1]))
(mult[0][2]) * (mult[2][2])
=======================
Returning stuff ['mult1', '0', '2'] (((mult[0][0]) * (mult[2][0])) + ((mult[0][1]) * (mult[2][1]))) + ((mult[0][2]) * (mult[2][2]))
====================================
double mult1[0][2] = (((mult[0][0]) * (mult[2][0])) + ((mult[0][1]) * (mult[2][1]))) + ((mult[0][2]) * (mult[2][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '1'], '0']
right:  [['mult', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '1'], '1']
right:  [['mult', '0'], '1']
in addition
(mult[1][0]) * (mult[0][0])
(mult[1][1]) * (mult[0][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '1'], '2']
right:  [['mult', '0'], '2']
in addition
((mult[1][0]) * (mult[0][0])) + ((mult[1][1]) * (mult[0][1]))
(mult[1][2]) * (mult[0][2])
=======================
Returning stuff ['mult1', '1', '0'] (((mult[1][0]) * (mult[0][0])) + ((mult[1][1]) * (mult[0][1]))) + ((mult[1][2]) * (mult[0][2]))
====================================
double mult1[1][0] = (((mult[1][0]) * (mult[0][0])) + ((mult[1][1]) * (mult[0][1]))) + ((mult[1][2]) * (mult[0][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '1'], '0']
right:  [['mult', '1'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '1'], '1']
right:  [['mult', '1'], '1']
in addition
(mult[1][0]) * (mult[1][0])
(mult[1][1]) * (mult[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '1'], '2']
right:  [['mult', '1'], '2']
in addition
((mult[1][0]) * (mult[1][0])) + ((mult[1][1]) * (mult[1][1]))
(mult[1][2]) * (mult[1][2])
=======================
Returning stuff ['mult1', '1', '1'] (((mult[1][0]) * (mult[1][0])) + ((mult[1][1]) * (mult[1][1]))) + ((mult[1][2]) * (mult[1][2]))
====================================
double mult1[1][1] = (((mult[1][0]) * (mult[1][0])) + ((mult[1][1]) * (mult[1][1]))) + ((mult[1][2]) * (mult[1][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '1'], '0']
right:  [['mult', '2'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '1'], '1']
right:  [['mult', '2'], '1']
in addition
(mult[1][0]) * (mult[2][0])
(mult[1][1]) * (mult[2][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '1', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '1'], '2']
right:  [['mult', '2'], '2']
in addition
((mult[1][0]) * (mult[2][0])) + ((mult[1][1]) * (mult[2][1]))
(mult[1][2]) * (mult[2][2])
=======================
Returning stuff ['mult1', '1', '2'] (((mult[1][0]) * (mult[2][0])) + ((mult[1][1]) * (mult[2][1]))) + ((mult[1][2]) * (mult[2][2]))
====================================
double mult1[1][2] = (((mult[1][0]) * (mult[2][0])) + ((mult[1][1]) * (mult[2][1]))) + ((mult[1][2]) * (mult[2][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '2'], '0']
right:  [['mult', '0'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '2'], '1']
right:  [['mult', '0'], '1']
in addition
(mult[2][0]) * (mult[0][0])
(mult[2][1]) * (mult[0][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '0'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '2'], '2']
right:  [['mult', '0'], '2']
in addition
((mult[2][0]) * (mult[0][0])) + ((mult[2][1]) * (mult[0][1]))
(mult[2][2]) * (mult[0][2])
=======================
Returning stuff ['mult1', '2', '0'] (((mult[2][0]) * (mult[0][0])) + ((mult[2][1]) * (mult[0][1]))) + ((mult[2][2]) * (mult[0][2]))
====================================
double mult1[2][0] = (((mult[2][0]) * (mult[0][0])) + ((mult[2][1]) * (mult[0][1]))) + ((mult[2][2]) * (mult[0][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '2'], '0']
right:  [['mult', '1'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '2'], '1']
right:  [['mult', '1'], '1']
in addition
(mult[2][0]) * (mult[1][0])
(mult[2][1]) * (mult[1][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '1'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '2'], '2']
right:  [['mult', '1'], '2']
in addition
((mult[2][0]) * (mult[1][0])) + ((mult[2][1]) * (mult[1][1]))
(mult[2][2]) * (mult[1][2])
=======================
Returning stuff ['mult1', '2', '1'] (((mult[2][0]) * (mult[1][0])) + ((mult[2][1]) * (mult[1][1]))) + ((mult[2][2]) * (mult[1][2]))
====================================
double mult1[2][1] = (((mult[2][0]) * (mult[1][0])) + ((mult[2][1]) * (mult[1][1]))) + ((mult[2][2]) * (mult[1][2]));
====================================
visit node visit_Compound
visit node visit_Assignment
@ Assignment
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='0'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='0'
                                           )
                        )
         )
left: [['mult', '2'], '0']
right:  [['mult', '2'], '0']
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='1'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='1'
                                           )
                        )
         )
left: [['mult', '2'], '1']
right:  [['mult', '2'], '1']
in addition
(mult[2][0]) * (mult[2][0])
(mult[2][1]) * (mult[2][1])
=======================
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
{'size': '3', 'n_grads': '10', 'mu': '0.384615', 'lambda': '0.32967', 'det_def_grad': '((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))', 'c': '2', 'd': '2'}
visit node visit_Constant
BinaryOp(op='*',
         left=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                             ),
                                     subscript=ID(name='c'
                                                  )
                                     ),
                       subscript=Constant(type='int',
                                          value='2'
                                          )
                       ),
         right=ArrayRef(name=ArrayRef(name=ID(name='mult'
                                              ),
                                      subscript=ID(name='d'
                                                   )
                                      ),
                        subscript=Constant(type='int',
                                           value='2'
                                           )
                        )
         )
left: [['mult', '2'], '2']
right:  [['mult', '2'], '2']
in addition
((mult[2][0]) * (mult[2][0])) + ((mult[2][1]) * (mult[2][1]))
(mult[2][2]) * (mult[2][2])
=======================
Returning stuff ['mult1', '2', '2'] (((mult[2][0]) * (mult[2][0])) + ((mult[2][1]) * (mult[2][1]))) + ((mult[2][2]) * (mult[2][2]))
====================================
double mult1[2][2] = (((mult[2][0]) * (mult[2][0])) + ((mult[2][1]) * (mult[2][1]))) + ((mult[2][2]) * (mult[2][2]));
====================================
Deleting variables:  ['c', 'd']
In match item
Assignment(op='=',
           lvalue=ID(name='trace'
                     ),
           rvalue=BinaryOp(op='+',
                           left=BinaryOp(op='+',
                                         left=ArrayRef(name=ArrayRef(name=ID(name='mult1'
                                                                             ),
                                                                     subscript=Constant(type='int',
                                                                                        value='0'
                                                                                        )
                                                                     ),
                                                       subscript=Constant(type='int',
                                                                          value='0'
                                                                          )
                                                       ),
                                         right=ArrayRef(name=ArrayRef(name=ID(name='mult1'
                                                                              ),
                                                                      subscript=Constant(type='int',
                                                                                         value='1'
                                                                                         )
                                                                      ),
                                                        subscript=Constant(type='int',
                                                                           value='1'
                                                                           )
                                                        )
                                         ),
                           right=ArrayRef(name=ArrayRef(name=ID(name='mult1'
                                                                ),
                                                        subscript=Constant(type='int',
                                                                           value='2'
                                                                           )
                                                        ),
                                          subscript=Constant(type='int',
                                                             value='2'
                                                             )
                                          )
                           )
           )
visit node visit_Assignment
@ Assignment
visit node visit_ID
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
in addition
mult1[0][0]
mult1[1][1]
=======================
visit node visit_ArrayRef
visit node visit_ArrayRef
visit node visit_ID
visit node visit_Constant
visit node visit_Constant
in addition
(mult1[0][0]) + (mult1[1][1])
mult1[2][2]
=======================
Returning stuff ['trace'] ((mult1[0][0]) + (mult1[1][1])) + (mult1[2][2])
(['trace'], '((mult1[0][0]) + (mult1[1][1])) + (mult1[2][2])')
double trace = ((mult1[0][0]) + (mult1[1][1])) + (mult1[2][2]);

In match item
Decl(name='log_det_j',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='log_det_j',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=FuncCall(name=ID(name='log'
                           ),
                   args=ExprList(exprs=[ID(name='det_def_grad'
                                           )
                                       ]
                                 )
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='log_det_j',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='log_det_j',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=FuncCall(name=ID(name='log'
                           ),
                   args=ExprList(exprs=[ID(name='det_def_grad'
                                           )
                                       ]
                                 )
                   ),
     bitsize=None
     )
FuncCall
visit node visit_FuncCall
visit node visit_ID
New variable:  log_det_j  =  log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))
In match item
Decl(name='val',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='val',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=BinaryOp(op='+',
                   left=BinaryOp(op='*',
                                 left=BinaryOp(op='/',
                                               left=ID(name='mu'
                                                       ),
                                               right=Constant(type='double',
                                                              value='2.'
                                                              )
                                               ),
                                 right=BinaryOp(op='-',
                                                left=BinaryOp(op='-',
                                                              left=ID(name='trace'
                                                                      ),
                                                              right=ID(name='size'
                                                                       )
                                                              ),
                                                right=BinaryOp(op='*',
                                                               left=Constant(type='int',
                                                                             value='2'
                                                                             ),
                                                               right=ID(name='log_det_j'
                                                                        )
                                                               )
                                                )
                                 ),
                   right=BinaryOp(op='*',
                                  left=BinaryOp(op='*',
                                                left=BinaryOp(op='/',
                                                              left=ID(name='lambda'
                                                                      ),
                                                              right=Constant(type='int',
                                                                             value='2'
                                                                             )
                                                              ),
                                                right=ID(name='log_det_j'
                                                         )
                                                ),
                                  right=ID(name='log_det_j'
                                           )
                                  )
                   ),
     bitsize=None
     )
visit node visit_Decl
Decl(name='val',
     quals=['const'
           ],
     storage=[
             ],
     funcspec=[
              ],
     type=TypeDecl(declname='val',
                   quals=['const'
                         ],
                   type=IdentifierType(names=['double'
                                             ]
                                       )
                   ),
     init=BinaryOp(op='+',
                   left=BinaryOp(op='*',
                                 left=BinaryOp(op='/',
                                               left=ID(name='mu'
                                                       ),
                                               right=Constant(type='double',
                                                              value='2.'
                                                              )
                                               ),
                                 right=BinaryOp(op='-',
                                                left=BinaryOp(op='-',
                                                              left=ID(name='trace'
                                                                      ),
                                                              right=ID(name='size'
                                                                       )
                                                              ),
                                                right=BinaryOp(op='*',
                                                               left=Constant(type='int',
                                                                             value='2'
                                                                             ),
                                                               right=ID(name='log_det_j'
                                                                        )
                                                               )
                                                )
                                 ),
                   right=BinaryOp(op='*',
                                  left=BinaryOp(op='*',
                                                left=BinaryOp(op='/',
                                                              left=ID(name='lambda'
                                                                      ),
                                                              right=Constant(type='int',
                                                                             value='2'
                                                                             )
                                                              ),
                                                right=ID(name='log_det_j'
                                                         )
                                                ),
                                  right=ID(name='log_det_j'
                                           )
                                  )
                   ),
     bitsize=None
     )
BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_Constant
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ID
BinaryOp(op='-',
         left=ID(name='trace'
                 ),
         right=ID(name='size'
                  )
         )
left: trace
right:  size
visit node visit_BinaryOp
visit node visit_Constant
visit node visit_ID
BinaryOp(op='*',
         left=Constant(type='int',
                       value='2'
                       ),
         right=ID(name='log_det_j'
                  )
         )
left: 2
right:  log_det_j
BinaryOp(op='-',
         left=BinaryOp(op='-',
                       left=ID(name='trace'
                               ),
                       right=ID(name='size'
                                )
                       ),
         right=BinaryOp(op='*',
                        left=Constant(type='int',
                                      value='2'
                                      ),
                        right=ID(name='log_det_j'
                                 )
                        )
         )
left: (trace) - (3)
right:  (2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))
BinaryOp(op='*',
         left=BinaryOp(op='/',
                       left=ID(name='mu'
                               ),
                       right=Constant(type='double',
                                      value='2.'
                                      )
                       ),
         right=BinaryOp(op='-',
                        left=BinaryOp(op='-',
                                      left=ID(name='trace'
                                              ),
                                      right=ID(name='size'
                                               )
                                      ),
                        right=BinaryOp(op='*',
                                       left=Constant(type='int',
                                                     value='2'
                                                     ),
                                       right=ID(name='log_det_j'
                                                )
                                       )
                        )
         )
left: (0.384615) / (2.)
right:  ((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_BinaryOp
visit node visit_ID
visit node visit_Constant
visit node visit_ID
BinaryOp(op='*',
         left=BinaryOp(op='/',
                       left=ID(name='lambda'
                               ),
                       right=Constant(type='int',
                                      value='2'
                                      )
                       ),
         right=ID(name='log_det_j'
                  )
         )
left: (0.32967) / (2)
right:  log_det_j
visit node visit_ID
BinaryOp(op='*',
         left=BinaryOp(op='*',
                       left=BinaryOp(op='/',
                                     left=ID(name='lambda'
                                             ),
                                     right=Constant(type='int',
                                                    value='2'
                                                    )
                                     ),
                       right=ID(name='log_det_j'
                                )
                       ),
         right=ID(name='log_det_j'
                  )
         )
left: ((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))
right:  log_det_j
in addition
((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))
(((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))
=======================
New variable:  val  =  (((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))) + ((((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))
In match item
Assignment(op='=',
           lvalue=ID(name='energy'
                     ),
           rvalue=BinaryOp(op='+',
                           left=ID(name='energy'
                                   ),
                           right=BinaryOp(op='*',
                                          left=ID(name='val'
                                                  ),
                                          right=ArrayRef(name=ID(name='da'
                                                                 ),
                                                         subscript=ID(name='p'
                                                                      )
                                                         )
                                          )
                           )
           )
visit node visit_Assignment
@ Assignment
visit node visit_ID
visit node visit_BinaryOp
visit node visit_ID
visit node visit_BinaryOp
visit node visit_ID
visit node visit_ArrayRef
visit node visit_ID
visit node visit_ID
BinaryOp(op='*',
         left=ID(name='val'
                 ),
         right=ArrayRef(name=ID(name='da'
                                ),
                        subscript=ID(name='p'
                                     )
                        )
         )
left: val
right:  ['da', 'p']
in addition
energy
((((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))) + ((((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))) * (da[p])
=======================
Returning stuff ['energy'] (energy) + (((((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))) + ((((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))) * (da[p]))
(['energy'], '(energy) + (((((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))) + ((((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))) * (da[p]))')
double energy = (energy) + (((((0.384615) / (2.)) * (((trace) - (3)) - ((2) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))))) + ((((0.32967) / (2)) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0]))))) * (log(((mult[0][0]) * (mult[1][1])) - ((mult[0][1]) * (mult[1][0])))))) * (da[p]));

CCODE:  True
ISPC CODE:  False
[0,0 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[0]:
[0,1 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[1]:
[0,2 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[2]:
[0,3 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[3]:
[0,4 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[4]:
[0,5 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[5]:
[0,6 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[6]:
[0,7 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[7]:
[0,8 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[8]:
[0,9 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[9]:
[0,10 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[10]:
[0,11 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[11]:
[0,12 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[12]:
[0,13 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[13]:
[0,14 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[14]:
[0,15 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[15]:
[0,16 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[16]:
[0,17 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[17]:
[0,18 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[18]:
[0,19 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[19]:
[0,20 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[20]:
[0,21 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[21]:
[0,22 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[22]:
[0,23 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[23]:
[0,24 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[24]:
[0,25 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[25]:
[0,26 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[26]:
[0,27 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[27]:
[0,28 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[28]:
[0,29 / 30] Second derivative : df / dlocal_disp[0] dlocal_disp[29]:
[1,1 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[1]:
[1,2 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[2]:
[1,3 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[3]:
[1,4 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[4]:
[1,5 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[5]:
[1,6 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[6]:
[1,7 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[7]:
[1,8 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[8]:
[1,9 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[9]:
[1,10 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[10]:
[1,11 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[11]:
[1,12 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[12]:
[1,13 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[13]:
[1,14 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[14]:
[1,15 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[15]:
[1,16 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[16]:
[1,17 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[17]:
[1,18 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[18]:
[1,19 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[19]:
[1,20 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[20]:
[1,21 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[21]:
[1,22 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[22]:
[1,23 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[23]:
[1,24 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[24]:
[1,25 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[25]:
[1,26 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[26]:
[1,27 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[27]:
[1,28 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[28]:
[1,29 / 30] Second derivative : df / dlocal_disp[1] dlocal_disp[29]:
[2,2 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[2]:
[2,3 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[3]:
[2,4 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[4]:
[2,5 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[5]:
[2,6 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[6]:
[2,7 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[7]:
[2,8 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[8]:
[2,9 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[9]:
[2,10 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[10]:
[2,11 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[11]:
[2,12 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[12]:
[2,13 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[13]:
[2,14 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[14]:
[2,15 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[15]:
[2,16 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[16]:
[2,17 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[17]:
[2,18 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[18]:
[2,19 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[19]:
[2,20 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[20]:
[2,21 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[21]:
[2,22 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[22]:
[2,23 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[23]:
[2,24 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[24]:
[2,25 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[25]:
[2,26 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[26]:
[2,27 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[27]:
[2,28 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[28]:
[2,29 / 30] Second derivative : df / dlocal_disp[2] dlocal_disp[29]:
[3,3 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[3]:
[3,4 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[4]:
[3,5 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[5]:
[3,6 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[6]:
[3,7 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[7]:
[3,8 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[8]:
[3,9 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[9]:
[3,10 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[10]:
[3,11 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[11]:
[3,12 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[12]:
[3,13 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[13]:
[3,14 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[14]:
[3,15 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[15]:
[3,16 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[16]:
[3,17 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[17]:
[3,18 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[18]:
[3,19 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[19]:
[3,20 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[20]:
[3,21 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[21]:
[3,22 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[22]:
[3,23 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[23]:
[3,24 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[24]:
[3,25 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[25]:
[3,26 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[26]:
[3,27 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[27]:
[3,28 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[28]:
[3,29 / 30] Second derivative : df / dlocal_disp[3] dlocal_disp[29]:
[4,4 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[4]:
[4,5 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[5]:
[4,6 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[6]:
[4,7 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[7]:
[4,8 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[8]:
[4,9 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[9]:
[4,10 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[10]:
[4,11 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[11]:
[4,12 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[12]:
[4,13 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[13]:
[4,14 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[14]:
[4,15 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[15]:
[4,16 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[16]:
[4,17 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[17]:
[4,18 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[18]:
[4,19 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[19]:
[4,20 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[20]:
[4,21 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[21]:
[4,22 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[22]:
[4,23 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[23]:
[4,24 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[24]:
[4,25 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[25]:
[4,26 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[26]:
[4,27 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[27]:
[4,28 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[28]:
[4,29 / 30] Second derivative : df / dlocal_disp[4] dlocal_disp[29]:
[5,5 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[5]:
[5,6 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[6]:
[5,7 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[7]:
[5,8 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[8]:
[5,9 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[9]:
[5,10 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[10]:
[5,11 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[11]:
[5,12 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[12]:
[5,13 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[13]:
[5,14 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[14]:
[5,15 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[15]:
[5,16 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[16]:
[5,17 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[17]:
[5,18 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[18]:
[5,19 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[19]:
[5,20 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[20]:
[5,21 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[21]:
[5,22 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[22]:
[5,23 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[23]:
[5,24 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[24]:
[5,25 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[25]:
[5,26 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[26]:
[5,27 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[27]:
[5,28 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[28]:
[5,29 / 30] Second derivative : df / dlocal_disp[5] dlocal_disp[29]:
[6,6 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[6]:
[6,7 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[7]:
[6,8 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[8]:
[6,9 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[9]:
[6,10 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[10]:
[6,11 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[11]:
[6,12 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[12]:
[6,13 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[13]:
[6,14 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[14]:
[6,15 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[15]:
[6,16 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[16]:
[6,17 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[17]:
[6,18 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[18]:
[6,19 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[19]:
[6,20 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[20]:
[6,21 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[21]:
[6,22 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[22]:
[6,23 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[23]:
[6,24 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[24]:
[6,25 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[25]:
[6,26 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[26]:
[6,27 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[27]:
[6,28 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[28]:
[6,29 / 30] Second derivative : df / dlocal_disp[6] dlocal_disp[29]:
[7,7 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[7]:
[7,8 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[8]:
[7,9 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[9]:
[7,10 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[10]:
[7,11 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[11]:
[7,12 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[12]:
[7,13 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[13]:
[7,14 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[14]:
[7,15 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[15]:
[7,16 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[16]:
[7,17 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[17]:
[7,18 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[18]:
[7,19 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[19]:
[7,20 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[20]:
[7,21 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[21]:
[7,22 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[22]:
[7,23 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[23]:
[7,24 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[24]:
[7,25 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[25]:
[7,26 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[26]:
[7,27 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[27]:
[7,28 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[28]:
[7,29 / 30] Second derivative : df / dlocal_disp[7] dlocal_disp[29]:
[8,8 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[8]:
[8,9 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[9]:
[8,10 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[10]:
[8,11 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[11]:
[8,12 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[12]:
[8,13 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[13]:
[8,14 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[14]:
[8,15 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[15]:
[8,16 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[16]:
[8,17 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[17]:
[8,18 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[18]:
[8,19 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[19]:
[8,20 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[20]:
[8,21 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[21]:
[8,22 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[22]:
[8,23 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[23]:
[8,24 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[24]:
[8,25 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[25]:
[8,26 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[26]:
[8,27 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[27]:
[8,28 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[28]:
[8,29 / 30] Second derivative : df / dlocal_disp[8] dlocal_disp[29]:
[9,9 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[9]:
[9,10 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[10]:
[9,11 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[11]:
[9,12 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[12]:
[9,13 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[13]:
[9,14 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[14]:
[9,15 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[15]:
[9,16 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[16]:
[9,17 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[17]:
[9,18 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[18]:
[9,19 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[19]:
[9,20 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[20]:
[9,21 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[21]:
[9,22 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[22]:
[9,23 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[23]:
[9,24 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[24]:
[9,25 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[25]:
[9,26 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[26]:
[9,27 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[27]:
[9,28 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[28]:
[9,29 / 30] Second derivative : df / dlocal_disp[9] dlocal_disp[29]:
[10,10 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[10]:
[10,11 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[11]:
[10,12 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[12]:
[10,13 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[13]:
[10,14 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[14]:
[10,15 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[15]:
[10,16 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[16]:
[10,17 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[17]:
[10,18 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[18]:
[10,19 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[19]:
[10,20 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[20]:
[10,21 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[21]:
[10,22 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[22]:
[10,23 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[23]:
[10,24 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[24]:
[10,25 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[25]:
[10,26 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[26]:
[10,27 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[27]:
[10,28 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[28]:
[10,29 / 30] Second derivative : df / dlocal_disp[10] dlocal_disp[29]:
[11,11 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[11]:
[11,12 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[12]:
[11,13 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[13]:
[11,14 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[14]:
[11,15 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[15]:
[11,16 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[16]:
[11,17 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[17]:
[11,18 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[18]:
[11,19 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[19]:
[11,20 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[20]:
[11,21 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[21]:
[11,22 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[22]:
[11,23 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[23]:
[11,24 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[24]:
[11,25 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[25]:
[11,26 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[26]:
[11,27 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[27]:
[11,28 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[28]:
[11,29 / 30] Second derivative : df / dlocal_disp[11] dlocal_disp[29]:
[12,12 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[12]:
[12,13 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[13]:
[12,14 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[14]:
[12,15 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[15]:
[12,16 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[16]:
[12,17 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[17]:
[12,18 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[18]:
[12,19 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[19]:
[12,20 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[20]:
[12,21 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[21]:
[12,22 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[22]:
[12,23 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[23]:
[12,24 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[24]:
[12,25 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[25]:
[12,26 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[26]:
[12,27 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[27]:
[12,28 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[28]:
[12,29 / 30] Second derivative : df / dlocal_disp[12] dlocal_disp[29]:
[13,13 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[13]:
[13,14 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[14]:
[13,15 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[15]:
[13,16 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[16]:
[13,17 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[17]:
[13,18 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[18]:
[13,19 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[19]:
[13,20 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[20]:
[13,21 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[21]:
[13,22 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[22]:
[13,23 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[23]:
[13,24 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[24]:
[13,25 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[25]:
[13,26 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[26]:
[13,27 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[27]:
[13,28 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[28]:
[13,29 / 30] Second derivative : df / dlocal_disp[13] dlocal_disp[29]:
[14,14 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[14]:
[14,15 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[15]:
[14,16 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[16]:
[14,17 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[17]:
[14,18 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[18]:
[14,19 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[19]:
[14,20 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[20]:
[14,21 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[21]:
[14,22 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[22]:
[14,23 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[23]:
[14,24 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[24]:
[14,25 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[25]:
[14,26 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[26]:
[14,27 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[27]:
[14,28 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[28]:
[14,29 / 30] Second derivative : df / dlocal_disp[14] dlocal_disp[29]:
[15,15 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[15]:
[15,16 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[16]:
[15,17 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[17]:
[15,18 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[18]:
[15,19 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[19]:
[15,20 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[20]:
[15,21 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[21]:
[15,22 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[22]:
[15,23 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[23]:
[15,24 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[24]:
[15,25 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[25]:
[15,26 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[26]:
[15,27 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[27]:
[15,28 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[28]:
[15,29 / 30] Second derivative : df / dlocal_disp[15] dlocal_disp[29]:
[16,16 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[16]:
[16,17 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[17]:
[16,18 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[18]:
[16,19 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[19]:
[16,20 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[20]:
[16,21 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[21]:
[16,22 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[22]:
[16,23 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[23]:
[16,24 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[24]:
[16,25 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[25]:
[16,26 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[26]:
[16,27 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[27]:
[16,28 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[28]:
[16,29 / 30] Second derivative : df / dlocal_disp[16] dlocal_disp[29]:
[17,17 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[17]:
[17,18 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[18]:
[17,19 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[19]:
[17,20 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[20]:
[17,21 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[21]:
[17,22 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[22]:
[17,23 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[23]:
[17,24 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[24]:
[17,25 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[25]:
[17,26 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[26]:
[17,27 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[27]:
[17,28 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[28]:
[17,29 / 30] Second derivative : df / dlocal_disp[17] dlocal_disp[29]:
[18,18 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[18]:
[18,19 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[19]:
[18,20 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[20]:
[18,21 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[21]:
[18,22 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[22]:
[18,23 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[23]:
[18,24 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[24]:
[18,25 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[25]:
[18,26 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[26]:
[18,27 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[27]:
[18,28 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[28]:
[18,29 / 30] Second derivative : df / dlocal_disp[18] dlocal_disp[29]:
[19,19 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[19]:
[19,20 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[20]:
[19,21 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[21]:
[19,22 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[22]:
[19,23 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[23]:
[19,24 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[24]:
[19,25 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[25]:
[19,26 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[26]:
[19,27 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[27]:
[19,28 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[28]:
[19,29 / 30] Second derivative : df / dlocal_disp[19] dlocal_disp[29]:
[20,20 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[20]:
[20,21 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[21]:
[20,22 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[22]:
[20,23 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[23]:
[20,24 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[24]:
[20,25 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[25]:
[20,26 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[26]:
[20,27 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[27]:
[20,28 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[28]:
[20,29 / 30] Second derivative : df / dlocal_disp[20] dlocal_disp[29]:
[21,21 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[21]:
[21,22 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[22]:
[21,23 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[23]:
[21,24 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[24]:
[21,25 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[25]:
[21,26 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[26]:
[21,27 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[27]:
[21,28 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[28]:
[21,29 / 30] Second derivative : df / dlocal_disp[21] dlocal_disp[29]:
[22,22 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[22]:
[22,23 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[23]:
[22,24 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[24]:
[22,25 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[25]:
[22,26 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[26]:
[22,27 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[27]:
[22,28 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[28]:
[22,29 / 30] Second derivative : df / dlocal_disp[22] dlocal_disp[29]:
[23,23 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[23]:
[23,24 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[24]:
[23,25 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[25]:
[23,26 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[26]:
[23,27 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[27]:
[23,28 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[28]:
[23,29 / 30] Second derivative : df / dlocal_disp[23] dlocal_disp[29]:
[24,24 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[24]:
[24,25 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[25]:
[24,26 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[26]:
[24,27 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[27]:
[24,28 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[28]:
[24,29 / 30] Second derivative : df / dlocal_disp[24] dlocal_disp[29]:
[25,25 / 30] Second derivative : df / dlocal_disp[25] dlocal_disp[25]:
[25,26 / 30] Second derivative : df / dlocal_disp[25] dlocal_disp[26]:
[25,27 / 30] Second derivative : df / dlocal_disp[25] dlocal_disp[27]:
[25,28 / 30] Second derivative : df / dlocal_disp[25] dlocal_disp[28]:
[25,29 / 30] Second derivative : df / dlocal_disp[25] dlocal_disp[29]:
[26,26 / 30] Second derivative : df / dlocal_disp[26] dlocal_disp[26]:
[26,27 / 30] Second derivative : df / dlocal_disp[26] dlocal_disp[27]:
[26,28 / 30] Second derivative : df / dlocal_disp[26] dlocal_disp[28]:
[26,29 / 30] Second derivative : df / dlocal_disp[26] dlocal_disp[29]:
[27,27 / 30] Second derivative : df / dlocal_disp[27] dlocal_disp[27]:
[27,28 / 30] Second derivative : df / dlocal_disp[27] dlocal_disp[28]:
[27,29 / 30] Second derivative : df / dlocal_disp[27] dlocal_disp[29]:
[28,28 / 30] Second derivative : df / dlocal_disp[28] dlocal_disp[28]:
[28,29 / 30] Second derivative : df / dlocal_disp[28] dlocal_disp[29]:
[29,29 / 30] Second derivative : df / dlocal_disp[29] dlocal_disp[29]:
0.003138 0.000404 0.000540 0.000312 0.000307 0.000304 0.000338 0.000305 0.000337 starting..
2020-02-02 18:34:04.719092
doing 3D_P2_zero
compiling...
2020-02-02 18:44:24.418409
running...
2020-02-02 19:09:33.348272
0.003138
0.003138
0.000404
0.00054
0.000312
0.000307
0.000304
0.000338
0.000305
0.000337
doing 3D_P2_non_zero
